Функция ЗагрузитьСообщения(email = "") Экспорт
	
	Результат = "";
	АвтоматическаяОбработкаОтветовПоставщиков(email);
	Возврат Результат;
	
КонецФункции

//<<Блок парсинга ответов поставщиков на заказы Киричков
Процедура АвтоматическаяОбработкаОтветовПоставщиков(email) Экспорт
	
	Результат = ОбработатьОтветыПоставщиков(Неопределено, email, Неопределено);
	
КонецПроцедуры

Функция ОбработатьОтветыПоставщиков(МассивРазрешенныхИменКолонок = Неопределено, ЭлектронныйАдрес = "", МассивИдентификаторовОбрабатываемыхПисем = Неопределено) Экспорт
	
	Если МассивРазрешенныхИменКолонок = Неопределено Тогда
		МассивРазрешенныхИменКолонок = Новый Массив;
		МассивРазрешенныхИменКолонок.Добавить("Артикул");
		МассивРазрешенныхИменКолонок.Добавить("Бренд");
		МассивРазрешенныхИменКолонок.Добавить("Заказано");
		МассивРазрешенныхИменКолонок.Добавить("Доступно");
		МассивРазрешенныхИменКолонок.Добавить("Цена");
	КонецЕсли;
	СформироватьТаблицуСоВсемиПисьмами(МассивРазрешенныхИменКолонок, ЭлектронныйАдрес, МассивИдентификаторовОбрабатываемыхПисем);
	
КонецФункции

Процедура СформироватьТаблицуСоВсемиПисьмами(МассивРазрешенныхИменКолонок, ЭлектронныйАдрес, МассивИдентификаторовОбрабатываемыхПисем = Неопределено)
	
	ВременныйКаталог = КаталогВременныхФайлов();
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	Профиль.АдресСервераIMAP = "***";
	Профиль.ПользовательIMAP = "***";
	Профиль.ПортIMAP = 993;
	Профиль.ПарольIMAP = "***";
	Профиль.ИспользоватьSSLSMTP = Истина;
	Профиль.ИспользоватьSSLIMAP = Истина;
	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);
	Почта.ТекущийПочтовыйЯщик = "INBOX";
	МассивСообщений = Новый Массив;
	Если МассивИдентификаторовОбрабатываемыхПисем = Неопределено Тогда
		МассивСообщений = Почта.Выбрать(Ложь);
	Иначе
		МассивСообщений = Почта.Выбрать(Ложь, МассивИдентификаторовОбрабатываемыхПисем);
	КонецЕсли;
	МассивУдаляемыхПисем = Новый Массив;
	СписокФайловВложений = Новый СписокЗначений;
	//определим - не засралась ли очередь? Проверим самое старое письмо - оно должно быть не старше 15 минут.
	//TODO: Стоит учесть, что рано утром в очереди могут находиться письма даже за предыдущий день
	КрайнееВремя = ТекущаяДата() - 1200; //Время отправки писем не должно быть старше 20 минут 
	Для Каждого ВходящееПисьмо Из МассивСообщений Цикл
		ДатаОтправкиПисьма = ВходящееПисьмо.ДатаОтправления;
		Если ДатаОтправкиПисьма < КрайнееВремя Тогда
			Отказ = Ложь;
			//Хьюстон, у нас проблемы
			ПослатьУведомлениеРакете(Отказ);
			//TODO: Если Отказ Тогда ИспользоватьДругиеУведомления() КонецЕсли
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ВходящееПисьмо Из МассивСообщений Цикл
		Если ЭлектронныйАдрес <> "" И ВходящееПисьмо.Отправитель.Адрес <> ЭлектронныйАдрес Тогда
			Продолжить;
		КонецЕсли;
		//Сообщить("Загружаю!");
		СерверныйИдентификаторПисьма = ВходящееПисьмо.Идентификатор[0];
		СписокФайловВложений.Очистить();
		//Формируем список файлов для парсинга
		Если ВходящееПисьмо.Вложения.Количество() > 0 Тогда
			Для Каждого Вложение Из ВходящееПисьмо.Вложения Цикл
				ИмяФайлаВложения = Вложение.Имя;
				ОтфильтроватьНекорректныеСимволыИмениФайла(ИмяФайлаВложения);
				ФайлВложения = Новый Файл(ИмяФайлаВложения);
				ДанныеФайлаВложения = Вложение.Данные;
				РасширениеФайлаВложения = ФайлВложения.Расширение;
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайлаВложения);
				Если ВРег(РасширениеФайлаВложения) = ".ZIP" Тогда
					ДанныеФайлаВложения.Записать(ИмяВременногоФайла);
					ПолучитьФайлыИзАрхива(СписокФайловВложений, ИмяВременногоФайла, ВременныйКаталог);
				ИначеЕсли ВРег(РасширениеФайлаВложения) = ".XLS" ИЛИ ВРег(РасширениеФайлаВложения) = ".XLSX" Тогда
					ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайлаВложения);
					ДанныеФайлаВложения.Записать(ИмяВременногоФайла);
					СписокФайловВложений.Добавить(ИмяВременногоФайла);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ЕстьДанныеДляОбработки = Ложь;
		//обрабатываем спиок файлов
		Для Каждого ИмяВременногоФайла Из СписокФайловВложений Цикл 
			ЕстьДанныеДляОбработки = Истина;
			ЗагруженнаяТаблица = РаспарситьОтветНаЗаявку(ИмяВременногоФайла, МассивРазрешенныхИменКолонок); //ДоработкиСерверныеОбработки.ЗагрузитьМетодом_MSADODB(ИмяВременногоФайла, "TDSheet",,,,,"MicrosoftACEOLEDB12", МассивРазрешенныхИменКолонок);
			Файл = Новый Файл(ИмяВременногоФайла);
			Отказ = Ложь;
			ТекстОшибки = "";
			ИдентификаторЗаказа = "";

			Если ЗагруженнаяТаблица.Количество() > 0 Тогда 
				Если	ЗагруженнаяТаблица.Колонки.Найти("Артикул")		<> Неопределено И 
						ЗагруженнаяТаблица.Колонки.Найти("Бренд")		<> Неопределено И 
						ЗагруженнаяТаблица.Колонки.Найти("Заказано")	<> Неопределено И 
						ЗагруженнаяТаблица.Колонки.Найти("Доступно")	<> Неопределено И 
						ЗагруженнаяТаблица.Колонки.Найти("Цена")		<> Неопределено Тогда
					ТипизироватьЗагруженнуюТаблицу(ЗагруженнаяТаблица, ИдентификаторЗаказа, Отказ, ТекстОшибки);
					Если НЕ Отказ Тогда
						Результат = ЗаполнитьЗаявкуПоставщику(ЗагруженнаяТаблица, ИдентификаторЗаказа);
					Иначе
						Попытка
							СсылкаНаЗаявку = Документы.ЗаявкаПоставщику.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторЗаказа));
						Исключение
							СсылкаНаЗаявку = Документы.ЗаявкаПоставщику.ПустаяСсылка();
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			Иначе 
				ПроверитьВложениеНаДругиеТипыДокументов(ИмяВременногоФайла, ВходящееПисьмо.Отправитель.Адрес);
			КонецЕсли;
			Если Файл.Существует() Тогда
				Попытка
					УдалитьФайлы(ИмяВременногоФайла);
				Исключение
					РезультатОповещения = ДоработкиСервер.СформироватьЗадачуДляПользователя(Справочники.Пользователи.НЕКТО
																							,"Ошибка удаления файла вложения после анализа"
																							,"Файл " + Строка(ИмяВременногоФайла)
																							,
																							,
																							,Справочники.ВариантыОповещений.ОшибкаИнициализацииOLE);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		МассивУдаляемыхПисем.Добавить(СерверныйИдентификаторПисьма);
		Если ЕстьДанныеДляОбработки Тогда
			ЗаписьЖурналаРегистрации("Обработаны письма от поставщика", УровеньЖурналаРегистрации.Информация,,, "Отправитель: " + Строка(ВходящееПисьмо.Отправитель.Адрес));
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		Почта.УдалитьСообщения(МассивУдаляемыхПисем);
		Почта.ОчиститьУдаленныеСообщения();
	Исключение
		РезультатОповещения = ДоработкиСервер.СформироватьЗадачуДляПользователя(	Справочники.Пользователи.НЕКТО
																		, "Ошибка удаления обработанных писем на сервере"
																		, "Ошибка удаления обработанных писем на сервере"
																		, 
																		, 
																		, Справочники.ВариантыОповещений.ОшибкаИнициализацииOLE);
	КонецПопытки;	
	
	Почта.Отключиться();
	
КонецПроцедуры

Процедура ОтфильтроватьНекорректныеСимволыИмениФайла(ИмяФайлаВложения = "")
	
    ИмяФайлаВложения = СтрЗаменить(ИмяФайлаВложения, "\", "_");
    ИмяФайлаВложения = СтрЗаменить(ИмяФайлаВложения, "/", "_");
    ИмяФайлаВложения = СтрЗаменить(ИмяФайлаВложения, ":", "_");
    ИмяФайлаВложения = СтрЗаменить(ИмяФайлаВложения, "*", "_");
    ИмяФайлаВложения = СтрЗаменить(ИмяФайлаВложения, "?", "_");
    ИмяФайлаВложения = СтрЗаменить(ИмяФайлаВложения, """", "_");
    ИмяФайлаВложения = СтрЗаменить(ИмяФайлаВложения, "<", "_");
    ИмяФайлаВложения = СтрЗаменить(ИмяФайлаВложения, ">", "_");
    ИмяФайлаВложения = СтрЗаменить(ИмяФайлаВложения, "|", "_");
    ИмяФайлаВложения = СтрЗаменить(ИмяФайлаВложения, "+", "_");
	
КонецПроцедуры

Функция РаспарситьОтветНаЗаявку(ИмяВременногоФайла, МассивРазрешенныхИменКолонок)
	
	ТаблицаИзФайла = СформироватьТаблицуЗначенийИзФайла(ИмяВременногоФайла,, МассивРазрешенныхИменКолонок);
	
	Возврат ТаблицаИзФайла;
	
КонецФункции

Процедура ПолучитьФайлыИзАрхива(СписокФайловВложений, ИмяФайлаАрхива, ВременныйКаталог)
	СписокФайловНаУдаление = Новый СписокЗначений;
	ЧтениеАрхива = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
	ЭлементыАрхива = ЧтениеАрхива.Элементы;
	Для Каждого ЭлементАрхива Из ЭлементыАрхива Цикл
		Если (ВРЕГ(ЭлементАрхива.Расширение) = ".XLS") ИЛИ (ВРЕГ(ЭлементАрхива.Расширение) = ".XLSX") Тогда
			Попытка
				ЧтениеАрхива.Извлечь(ЭлементАрхива, ВременныйКаталог);
				НеправильноеИмяФайлаИзАрхива = ВременныйКаталог + Строка(ЭлементАрхива.Имя);
				ПравильноеИмяФайлаИзАрхива = ПолучитьИмяВременногоФайла(ЭлементАрхива.Расширение);
				ПереместитьФайл(НеправильноеИмяФайлаИзАрхива, ПравильноеИмяФайлаИзАрхива);
				СписокФайловВложений.Добавить(ПравильноеИмяФайлаИзАрхива);
				СписокФайловНаУдаление.Добавить(НеправильноеИмяФайлаИзАрхива);
			Исключение

			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	СписокФайловНаУдаление.Добавить(ИмяФайлаАрхива);
		
	Для Каждого ФайлНаУдаление Из СписокФайловНаУдаление Цикл
		ФайлАрхива = Новый Файл(ФайлНаУдаление);
		Если ФайлАрхива.Существует() Тогда
			Попытка
				УдалитьФайлы(ФайлНаУдаление);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ТипизироватьЗагруженнуюТаблицу(ЗагруженнаяТаблица, ИдентификаторЗаказа, Отказ, ТекстОшибки = "")
	
	МассивКвалификаторов = Новый Массив;
	КвалификаторКоличества = Новый КвалификаторыЧисла(14, 0);
	МассивКвалификаторов.Добавить(Тип("Число"));
	ОписаниеТиповКоличество = Новый ОписаниеТипов(МассивКвалификаторов,,,КвалификаторКоличества);
	МассивКвалификаторов.Очистить();
	
	КвалификаторЦены = Новый КвалификаторыЧисла(14, 2);
	МассивКвалификаторов.Добавить(Тип("Число"));
	ОписаниеТиповЦена = Новый ОписаниеТипов(МассивКвалификаторов,,,КвалификаторЦены);
	МассивКвалификаторов.Очистить();
	
	КС = Новый КвалификаторыСтроки();
	МассивКвалификаторов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивКвалификаторов,,,КС);
	МассивКвалификаторов.Очистить();
	
	КвалификаторАртикула = Новый КвалификаторыСтроки(25);
	МассивКвалификаторов.Добавить(Тип("Строка"));
	ОписаниеТиповАртикул = Новый ОписаниеТипов(МассивКвалификаторов,,,КвалификаторАртикула);
	МассивКвалификаторов.Очистить();
	
	ТипизированнаяТаблица = Новый ТаблицаЗначений;
	ТипизированнаяТаблица.Колонки.Добавить("НомерСтроки", ОписаниеТиповКоличество);
	ТипизированнаяТаблица.Колонки.Добавить("Артикул", ОписаниеТиповАртикул);
	ТипизированнаяТаблица.Колонки.Добавить("Бренд", Новый ОписаниеТипов("СправочникСсылка.Производители"));
	ТипизированнаяТаблица.Колонки.Добавить("Количество", ОписаниеТиповКоличество);
	ТипизированнаяТаблица.Колонки.Добавить("Доступно", ОписаниеТиповКоличество);
	ТипизированнаяТаблица.Колонки.Добавить("Цена", ОписаниеТиповЦена);
	
	МассивБрендовНефильтрат = ЗагруженнаяТаблица.ВыгрузитьКолонку("Бренд");
	МассивБрендов = Новый Массив;
	Для Каждого ЭлементМассиваБрендовНефильтрат Из МассивБрендовНефильтрат Цикл
		
		Если ЭлементМассиваБрендовНефильтрат <> Неопределено Тогда
			МассивБрендов.Добавить(ЭлементМассиваБрендовНефильтрат);
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатСтруктура = ТипизироватьМассивБрендов(МассивБрендов);
	Если РезультатСтруктура.ТекстОшибки <> "" Тогда
		ТекстОшибки = РезультатСтруктура.ТекстОшибки;
		Отказ = Истина;
		Возврат;
	Иначе
		ТаблицаСоответствияБрендов = РезультатСтруктура.ТаблицаСоответствияБрендов;
	КонецЕсли;
	
	НомерСтрокиТипизированнойТаблицы = 1;
	Для Каждого СтрокаЗагруженнойТаблицы Из ЗагруженнаяТаблица Цикл
		Если Найти(СтрокаЗагруженнойТаблицы.Артикул, "Идентификатор заявки: ") > 0 Тогда
			ИдентификаторЗаказа = СтрЗаменить(СтрокаЗагруженнойТаблицы.Артикул, "Идентификатор заявки: ", "");
			Продолжить;
		КонецЕсли;
		Если СтрокаЗагруженнойТаблицы.Бренд = Неопределено Тогда Продолжить КонецЕсли; //пропускаем строки с пустым артикулом
		Попытка
			НоваяСтрока = ТипизированнаяТаблица.Добавить();
			ТекстОшибки = "Ошибка типизации ""Артикул"" из файла";
			НоваяСтрока.НомерСтроки = НомерСтрокиТипизированнойТаблицы;
			НоваяСтрока.Артикул = Строка(СтрокаЗагруженнойТаблицы.Артикул);
			ТекстОшибки = "Ошибка типизации ""Бренд"" из файла";
			СтрокаСоСсылкойНаБренд = ТаблицаСоответствияБрендов.Найти(Строка(СтрокаЗагруженнойТаблицы.Бренд), "Наименование");
			Если СтрокаСоСсылкойНаБренд = Неопределено Тогда
				ТекстОшибки = "Ошибка поиска бренда " + """" + Строка(СтрокаЗагруженнойТаблицы.Бренд) + """" + " в нашей базе";
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			НоваяСтрока.Бренд = СтрокаСоСсылкойНаБренд.Ссылка;
			ТекстОшибки = "Ошибка типизации ""Заказано"" из файла";
			НоваяСтрока.Количество = Число(СтрокаЗагруженнойТаблицы.Заказано);
			ТекстОшибки = "Ошибка типизации ""Доступно"" из файла";
			НоваяСтрока.Доступно = Число(СтрокаЗагруженнойТаблицы.Доступно);
			ТекстОшибки = "Ошибка типизации ""Цена"" из файла";
			НоваяСтрока.Цена = Строка(СтрокаЗагруженнойТаблицы.Цена);
			ТекстОшибки = "";
		Исключение
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		НомерСтрокиТипизированнойТаблицы = НомерСтрокиТипизированнойТаблицы + 1;
	КонецЦикла;
	Если ИдентификаторЗаказа = "" Тогда	
		ТекстОшибки = "Идентификатор заявки в файле не обнаружен";
		Отказ = Истина;
	КонецЕсли;
	ЗагруженнаяТаблица = ТипизированнаяТаблица.Скопировать();
	
КонецПроцедуры

Функция ТипизироватьМассивБрендов(МассивБрендов)
	
	Результат = Новый Структура;
	ТекстОшибки = "";
	Результат.Вставить("ТекстОшибки", ТекстОшибки);
	//Результат.Вставить("ТаблицаСоответствияБрендов", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Производители.Ссылка КАК Ссылка,
	               |	Производители.Наименование,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Производители.Ссылка) КАК КоличествоСсылок
	               |ПОМЕСТИТЬ ТаблицаСоответствияБрендов
	               |ИЗ
	               |	Справочник.Производители КАК Производители
	               |ГДЕ
	               |	Производители.Наименование В(&МассивБрендов)
	               |	И Производители.ПометкаУдаления = ЛОЖЬ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Производители.Наименование,
	               |	Производители.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ТаблицаСоответствияБрендов.КоличествоСсылок > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)
	               |		ИНАЧЕ ТаблицаСоответствияБрендов.Ссылка
	               |	КОНЕЦ КАК Ссылка,
	               |	ТаблицаСоответствияБрендов.Наименование,
	               |	МАКСИМУМ(ТаблицаСоответствияБрендов.КоличествоСсылок) КАК КоличествоСсылок
	               |ИЗ
	               |	ТаблицаСоответствияБрендов КАК ТаблицаСоответствияБрендов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА ТаблицаСоответствияБрендов.КоличествоСсылок > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)
	               |		ИНАЧЕ ТаблицаСоответствияБрендов.Ссылка
	               |	КОНЕЦ,
	               |	ТаблицаСоответствияБрендов.Наименование";
	
	Запрос.УстановитьПараметр("МассивБрендов", МассивБрендов);
	ТаблицаБрендов = Запрос.Выполнить().Выгрузить();
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Ссылка", Справочники.Производители.ПустаяСсылка());
	МассивЗадублированныхБрендов = ТаблицаБрендов.НайтиСтроки(СтруктураОтбора);
	Если МассивЗадублированныхБрендов.Количество() > 0 Тогда
		//Обнаружены дубли
		Для Каждого ЭлементМассива Из МассивЗадублированныхБрендов Цикл
			Если ТекстОшибки <> "" Тогда
				 ТекстОшибки = ТекстОшибки + Символы.ВК + Символы.ПС;
			КонецЕсли;
			ТекстОшибки = ТекстОшибки + "Обнаружен дубликат производителя " + """" + Строка(ЭлементМассива.Знчение["Наименование"]) + """" + " в количестве " + Строка(ЭлементМассива.Значение["КоличествоСсылок"]);
		КонецЦикла;
		Результат.Вставить("ТекстОшибки", ТекстОшибки);
	Иначе
		//Иначе всё нормально с брендами
		Результат.Вставить("ТаблицаСоответствияБрендов", ТаблицаБрендов);
	КонецЕсли;
	
	Возврат Результат;
				
КонецФункции

Функция ЗаполнитьЗаявкуПоставщику(ЗагруженнаяТаблица, Идентификатор) Экспорт
	
	Попытка
		ЗаявкаПоставщикуСсылка = Документы.ЗаявкаПоставщику.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
	Исключение
		Результат = ДоработкиСервер.СформироватьЗадачуДляПользователя(	Справочники.Пользователи.НЕКТО
																		, "Ошибка поиска заявки по идентификатору"
																		, Строка(Идентификатор) + " некорректен"
																		, 
																		, 
																		, Справочники.ВариантыОповещений.ОшибкаИнициализацииOLE);
		
		Возврат Ложь;
	КонецПопытки;
	
		
		
		
	Если ЗаявкаПоставщикуСсылка.Закрыта ИЛИ НЕ ЗаявкаПоставщикуСсылка.Контрагент.АвтоматическоеЗаполнениеЗаказаПоставщикуОтветомИзПочты Тогда
		Результат = ДоработкиСервер.СформироватьЗадачуДляПользователя(	Справочники.Пользователи.НЕКТО
																, Строка(ЗаявкаПоставщикуСсылка) + " уже закрыта или у поставщика не установлен признак автоматической загрузки вложений"
																, Строка(ЗаявкаПоставщикуСсылка) + " уже закрыта или у поставщика не установлен признак автоматической загрузки вложений"
																, 
																, 
																, Справочники.ВариантыОповещений.ОшибкаИнициализацииOLE);

		Возврат Ложь;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗагруженнаяТаблица.Артикул,
	               |	ЗагруженнаяТаблица.Бренд,
	               |	ЗагруженнаяТаблица.Количество,
	               |	ЗагруженнаяТаблица.Доступно,
	               |	ЗагруженнаяТаблица.Цена,
	               |	ЗагруженнаяТаблица.НомерСтроки
	               |ПОМЕСТИТЬ ТаблицаИзФайла
	               |ИЗ
	               |	&ЗагруженнаяТаблица КАК ЗагруженнаяТаблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаявкаПоставщикуТовары.Ссылка,
	               |	ЗаявкаПоставщикуТовары.НомерСтроки,
	               |	ЗаявкаПоставщикуТовары.Номенклатура,
	               |	ЗаявкаПоставщикуТовары.ЕдиницаИзмерения,
	               |	ЗаявкаПоставщикуТовары.Количество,
	               |	ЗаявкаПоставщикуТовары.ЦенаЗакупки,
	               |	ЗаявкаПоставщикуТовары.ЦенаПродажи,
	               |	ЗаявкаПоставщикуТовары.СуммаЗакупки,
	               |	ЗаявкаПоставщикуТовары.ПроцентНаценки,
	               |	ЗаявкаПоставщикуТовары.КонтрагентПокупатель,
	               |	ЗаявкаПоставщикуТовары.КонтрагентПоставщик,
	               |	ЗаявкаПоставщикуТовары.ЗаказПоставщику,
	               |	ЗаявкаПоставщикуТовары.ЗаказПокупателя,
	               |	ЗаявкаПоставщикуТовары.Отказ,
	               |	ЗаявкаПоставщикуТовары.ПричинаОтказа,
	               |	ЗаявкаПоставщикуТовары.СрокДоставкиМинимальный,
	               |	ЗаявкаПоставщикуТовары.СрокДоставкиМаксимальный,
	               |	ЗаявкаПоставщикуТовары.GUIDТовараВЗаказе,
	               |	ЗаявкаПоставщикуТовары.GUIDСтрокиЗаказа,
	               |	ЗаявкаПоставщикуТовары.Обработан,
	               |	ЗаявкаПоставщикуТовары.Дата,
	               |	ЗаявкаПоставщикуТовары.Код,
	               |	ЗаявкаПоставщикуТовары.Артикул,
	               |	ЗаявкаПоставщикуТовары.Бренд,
	               |	ЗаявкаПоставщикуТовары.КоличествоПоставщика,
	               |	ЗаявкаПоставщикуТовары.НоменклатураЗамена,
	               |	ЗаявкаПоставщикуТовары.ПоставщикЗамена,
	               |	ЗаявкаПоставщикуТовары.ДопустимаяЦена,
	               |	ЗаявкаПоставщикуТовары.Номенклатура.СлужебныйАртикул
	               |ПОМЕСТИТЬ ТаблицаИзДокумента
	               |ИЗ
	               |	Документ.ЗаявкаПоставщику.Товары КАК ЗаявкаПоставщикуТовары
	               |ГДЕ
	               |	ЗаявкаПоставщикуТовары.Ссылка = &ЗаявкаПоставщикуСсылка
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |	Документ.ЗаявкаПоставщику
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаИзДокумента.Ссылка,
	               |	ТаблицаИзДокумента.НомерСтроки,
	               |	ТаблицаИзДокумента.Номенклатура,
	               |	ТаблицаИзДокумента.ЕдиницаИзмерения,
	               |	ТаблицаИзДокумента.Количество,
	               |	ТаблицаИзДокумента.ЦенаЗакупки,
	               |	ТаблицаИзДокумента.ЦенаПродажи,
	               |	ЕСТЬNULL(ТаблицаИзДокумента.ЦенаЗакупки, 0) * ЕСТЬNULL(ТаблицаИзФайла.Доступно, 0) КАК СуммаЗакупки,
	               |	ТаблицаИзДокумента.ПроцентНаценки,
	               |	ТаблицаИзДокумента.КонтрагентПокупатель,
	               |	ТаблицаИзДокумента.КонтрагентПоставщик,
	               |	ТаблицаИзДокумента.ЗаказПоставщику,
	               |	ТаблицаИзДокумента.ЗаказПокупателя,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ТаблицаИзФайла.Доступно, 0) = 0
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Отказ,
	               |	ТаблицаИзДокумента.ПричинаОтказа,
	               |	ТаблицаИзДокумента.СрокДоставкиМинимальный,
	               |	ТаблицаИзДокумента.СрокДоставкиМаксимальный,
	               |	ТаблицаИзДокумента.GUIDТовараВЗаказе,
	               |	ТаблицаИзДокумента.GUIDСтрокиЗаказа,
	               |	ИСТИНА КАК Обработан,
	               |	ТаблицаИзДокумента.Дата,
	               |	ТаблицаИзДокумента.Код,
	               |	ТаблицаИзДокумента.Артикул,
	               |	ТаблицаИзДокумента.Бренд,
	               |	ТаблицаИзДокумента.НоменклатураЗамена,
	               |	ТаблицаИзДокумента.ПоставщикЗамена,
	               |	ТаблицаИзДокумента.ДопустимаяЦена,
	               |	ЕСТЬNULL(ТаблицаИзФайла.Доступно, 0) КАК КоличествоПоставщика
	               |ИЗ
	               |	ТаблицаИзДокумента КАК ТаблицаИзДокумента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИзФайла КАК ТаблицаИзФайла
	               |		ПО ТаблицаИзДокумента.Бренд = ТаблицаИзФайла.Бренд
	               |			И ТаблицаИзДокумента.Количество = ТаблицаИзФайла.Количество
	               |			И ТаблицаИзДокумента.НомерСтроки = ТаблицаИзФайла.НомерСтроки
	               |			И ТаблицаИзДокумента.НоменклатураСлужебныйАртикул = ТаблицаИзФайла.Артикул";
	
	
	Запрос.УстановитьПараметр("ЗагруженнаяТаблица", ЗагруженнаяТаблица);
	Запрос.УстановитьПараметр("ЗаявкаПоставщикуСсылка", ЗаявкаПоставщикуСсылка);
	
	РезультирующаяТаблица = Запрос.Выполнить().Выгрузить();
	Если РезультирующаяТаблица.Количество() = 0 Тогда
		Результат = ДоработкиСервер.СформироватьЗадачуДляПользователя(	Справочники.Пользователи.НЕКТО
																, "Результирующая таблица для заполнения пуста " + Строка(ЗаявкаПоставщикуСсылка)
																, Строка(ЗаявкаПоставщикуСсылка)
																, 
																, 
																, Справочники.ВариантыОповещений.ОшибкаИнициализацииOLE);
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ЗаявкаПоставщикуОбъект = ЗаявкаПоставщикуСсылка.ПолучитьОбъект();
		ЗаявкаПоставщикуОбъект.Товары.Загрузить(РезультирующаяТаблица);
		ЗаявкаПоставщикуОбъект.Закрыта = Истина;
	Исключение
		Результат = ДоработкиСервер.СформироватьЗадачуДляПользователя(	Справочники.Пользователи.НЕКТО
																, "Ошибка при получении объекта " + Строка(ЗаявкаПоставщикуСсылка)
																, Строка(ЗаявкаПоставщикуСсылка)
																, 
																, 
																, Справочники.ВариантыОповещений.ОшибкаИнициализацииOLE);
		Возврат Ложь;
	КонецПопытки;
		
	Попытка
		Результат = ЗаявкаПоставщикуОбъект.ЗафиксироватьОтветПоставщика();
		Если НЕ Результат.Статус Тогда
			ЗаявкаПоставщикуОбъект.Закрыта = Ложь;
			ЗаявкаПоставщикуОбъект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			ЗаявкаПоставщикуОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
	Исключение
		Результат = ДоработкиСервер.СформироватьЗадачуДляПользователя(	Справочники.Пользователи.НЕКТО
																		, "Ошибка при фиксации ответа или записи документа " + Строка(ЗаявкаПоставщикуСсылка)
																		, Строка(ЗаявкаПоставщикуСсылка)
																		, 
																		, 
																		, Справочники.ВариантыОповещений.ОшибкаИнициализацииOLE);
		Возврат Ложь;
	КонецПопытки;
	Результат = ДоработкиСервер.СформироватьЗадачуДляПользователя(	Справочники.Пользователи.НЕКТО
																	, "успешно загружен ответ от контрагента " + Строка(ЗаявкаПоставщикуСсылка.Контрагент) + " в " + Строка(ЗаявкаПоставщикуСсылка)
																	, "Успешно загружен ответ в заявку поставщику """ + Строка(ЗаявкаПоставщикуСсылка.Контрагент) + """"
																	, ЗаявкаПоставщикуСсылка.Ответственный
																	, ЗаявкаПоставщикуСсылка
																	, Справочники.ВариантыОповещений.УспешноЗагруженОтветПоставщика);
																	
	//стартовать тут фоновое задание по созданию документа "Поступление товаров и услуг"
	Если ЗаявкаПоставщикуСсылка.Контрагент.АвтосозданиеПоступленийТоваров Тогда
		ПараметрыФормирования = Новый Массив;
		ПараметрыФормирования.Добавить(ЗаявкаПоставщикуСсылка);
		ИдентификаторФоновогоЗадания = Новый УникальныйИдентификатор;
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("ДоработкиСерверныеОбработки.СозданиеПоступленияПоРезультатамЗагрузки", ПараметрыФормирования, ИдентификаторФоновогоЗадания, "Формирование поступления товаров по загруженной заявке поставщику");
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

Процедура СозданиеПоступленияПоРезультатамЗагрузки(ЗаявкаПоставщикуСсылка) Экспорт
	
	ПоступлениеТоваров = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	ПоступлениеТоваров.Заполнить(ЗаявкаПоставщикуСсылка);
	//Arsen: {04.11.2016 Надо заполнять тип цен поставщика
	Если ЗначениеЗаполнено(ПоступлениеТоваров.ДоговорКонтрагента) Тогда
		ТипЦеныПоставщика = ПоступлениеТоваров.ДоговорКонтрагента.ТипЦен;
	Иначе
		Если ПоступлениеТоваров.Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			ТипЦеныПоставщика = ПоступлениеТоваров.Контрагент.ОсновнойДоговорКонтрагента.ТипЦен;
		Иначе
			ТипЦеныПоставщика = Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	ПоступлениеТоваров.ТипЦен = ТипЦеныПоставщика;
	//Arsen: }04.11.2016
	//дата должна быть перезаполнена в соответствии с настройками контрагента
	ПоступлениеТоваров.Дата = ЗаявкаПоставщикуСсылка.Дата + ЗаявкаПоставщикуСсылка.Контрагент.КоличествоДнейДляОтложеннойЗаписиПоступлений * 86400;
	ПоступлениеТоваров.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	ПоступлениеТоваров.СкладОрдер = Справочники.Склады.ТранзитныйСклад;
	ПоступлениеТоваров.Комментарий = "Создано " + Строка(ТекущаяДата()); //автоматически по результатам обработки документа: " + Строка(ЗаявкаПоставщикуСсылка);
	ПоступлениеТоваров.Товары.Загрузить(ДоработкиСервер.ЗаполнитьГТДВДокументе(ПоступлениеТоваров.Товары.Выгрузить(),ПоступлениеТоваров.Дата));
	//обработаем статусы заказов поставщику
	Для Каждого СтрокаОбработки Из ЗаявкаПоставщикуСсылка.Товары Цикл
		РезультатОбработкиСтроки = ДоработкиКлиент.ОбработатьСтрокуАРМЗакупок(СтрокаОбработки, СтрокаОбработки.ЗаказПоставщику.СостояниеЗаказаПоставщика);
		Если НЕ РезультатОбработкиСтроки.Статус ТОгда
			ВсёОК = РезультатОбработкиСтроки.Статус;
			СообщениеОбОшибке = РезультатОбработкиСтроки.СообщениеОбОшибке;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	
	Попытка
		ПоступлениеТоваров.Записать(РежимЗаписиДокумента.Запись);
		Если НЕ РезультатОбработкиСтроки.Статус Тогда
			Результат = ДоработкиСервер.СформироватьЗадачуДляПользователя(	Справочники.Пользователи.НЕКТО
																			, "Ошибка обработки статусов документа " + Строка(СтрокаОбработки.ЗаказПоставщику) + " во время создания поступления товаров от контрагента " + Строка(ЗаявкаПоставщикуСсылка.Контрагент)
																			, СообщениеОбОшибке
																			, ЗаявкаПоставщикуСсылка.Ответственный
																			, ПоступлениеТоваров.Ссылка
																			, Справочники.ВариантыОповещений.УспешноЗагруженОтветПоставщика);
		КонецЕсли;
	Исключение
		Результат = ДоработкиСервер.СформироватьЗадачуДляПользователя(	Справочники.Пользователи.НЕКТО
																		, "Ошибка создания документа ""Поступление товаров"" по контрагенту " + Строка(ЗаявкаПоставщикуСсылка.Контрагент)
																		, "Ошибка создания документа ""Поступление товаров"" из документа " + Строка(ЗаявкаПоставщикуСсылка)
																		, ЗаявкаПоставщикуСсылка.Ответственный
																		, ЗаявкаПоставщикуСсылка
																		, Справочники.ВариантыОповещений.УспешноЗагруженОтветПоставщика);
		Возврат;																		
	КонецПопытки;
	
	
КонецПроцедуры

Процедура ПроверитьВложениеНаДругиеТипыДокументов(Файл, Email)
	
	Контрагент = ОпределитьКонтрагента(Email);
	Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда Возврат КонецЕсли;
	ДокументЗагружен = ЗагружаемКакУПД(Файл, Контрагент);
	Если ДокументЗагружен Тогда Возврат КонецЕсли;
	ДокументЗагружен = ЗагружаемПроизвольнуюФорму(Файл, Контрагент);
	
КонецПроцедуры

//HD_((Получение Суммы хеша объекта/реквизита для сравнения текущего и в базе данных
//Скармливаем любой объект (Спрачник, Документ, Реквизит) получаем СуммуХеша по нему
Функция ПолучитьХешСуммыПоДанным(ЧтоЛибо)Экспорт
	
	ЗаписьXML    = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ЧтоЛибо);
	ДанныеСтрока = ЗаписьXML.Закрыть();
	
	Хеш = Новый ХешированиеДанных(ХешФункция.CRC32);
	Хеш.Добавить(ДанныеСтрока);

	Возврат Хеш.ХешСумма;
	
КонецФункции
//))_HD

Функция ЗагружаемКакУПД(Файл, Контрагент)
	Отказ = Ложь;
	МетодЗагрузки = "MicrosoftACEOLEDB12";
	КоличествоСтрок = 0;
	//Если ДоработкиСерверныеОбработки.ПолучитьЗначениеПеременнойОтладки("НовыйМетодЗагрузкиXLS") Тогда
	ТаблицаПолная = СформироватьТаблицуЗначенийИзФайла(Файл);
	//Иначе
	//	ТаблицаПолная = ЗагрузитьМетодом_MSADODB_Универсальный(Файл, "TDSheet",,,, КоличествоСтрок, МетодЗагрузки);
	//КонецЕсли;
	Если ТаблицаПолная.Количество() = 0 Тогда Возврат Отказ КонецЕсли;
	Структура = ОпределитьПоставщикаИСписокОжидаемыхБрендов(Контрагент);
	Если Структура.ТаблицаОжидаемыхБрендов.Количество() = 0 Тогда Возврат Отказ КонецЕсли;
	ТабличнаяЧастьТоваров = СформироватьТаблицуТоваров(ТаблицаПолная);
	Если ТабличнаяЧастьТоваров.Количество() = 0 Тогда Возврат Отказ КонецЕсли;
	ТаблицаТоваровАртикулыПроизводители = СформироватьТаблицуТоваровАртикулыПроизводители(ТабличнаяЧастьТоваров, Структура.ТаблицаОжидаемыхБрендов);
	Если ТаблицаТоваровАртикулыПроизводители.Количество() = 0 Тогда Возврат Отказ КонецЕсли;
	Результат = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	СформироватьПоступление(Структура.Контрагент, ТаблицаТоваровАртикулыПроизводители, Отказ, Результат);
	Возврат НЕ Отказ;	
КонецФункции

Функция ЗагружаемПроизвольнуюФорму(Файл, Контрагент)
	Отказ = Ложь;
	МетодЗагрузки = "MicrosoftACEOLEDB12";
	СоответствиеКолонок = ОпределитьСоответствиеКолонок(Контрагент);
	Если СоответствиеКолонок = Неопределено Тогда Возврат Ложь КонецЕсли;
	
	Если ДоработкиСерверныеОбработки.ПолучитьЗначениеПеременнойОтладки("НовыйМетодЗагрузкиXLS") И СоответствиеКолонок.НовыйФормат Тогда
		ТаблицаПолная = СформироватьТаблицуЗначенийИзФайла(Файл);
	Иначе
		ТаблицаПолная = ДоработкиСерверныеОбработки.ЗагрузитьМетодом_MSADODB_Универсальный(Файл, "TDSheet",, СоответствиеКолонок.НачальнаяСтрока,,,МетодЗагрузки);
	КонецЕсли;
	Если ТаблицаПолная.Количество() = 0 Тогда Возврат Отказ КонецЕсли;
	Структура = ОпределитьПоставщикаИСписокОжидаемыхБрендов(Контрагент);
	Если Структура.ТаблицаОжидаемыхБрендов.Количество() = 0 Тогда Возврат Отказ КонецЕсли;
	ТабличнаяЧастьТоваров = СформироватьТаблицуТоваровПроизвольнаяФорма(ТаблицаПолная, СоответствиеКолонок);
	Если ТабличнаяЧастьТоваров.Количество() = 0 Тогда Возврат Отказ КонецЕсли;
	ТаблицаТоваровАртикулыПроизводители = СформироватьТаблицуТоваровАртикулыПроизводители(ТабличнаяЧастьТоваров, Структура.ТаблицаОжидаемыхБрендов);
	Если ТаблицаТоваровАртикулыПроизводители.Количество() = 0 Тогда Возврат Отказ КонецЕсли;
	Результат = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	СформироватьПоступление(Структура.Контрагент, ТаблицаТоваровАртикулыПроизводители, Отказ, Результат);
	Возврат НЕ Отказ;
КонецФункции

Функция СформироватьТаблицуТоваровПроизвольнаяФорма(ТаблицаПолная, СооответствиеКолонок) Экспорт
	
	СтрокаЗаголовка = ТаблицаПолная.Получить(0);
	ИндексСтрокиЗаголовка = ТаблицаПолная.Индекс(СтрокаЗаголовка);
	
	СтруктураСоответствияКолонокТаблицы = ОпределитьКолонкиТаблицыТоваровПоНастройкам(ТаблицаПолная, СооответствиеКолонок);
	ТаблицаТоваров = Новый ТаблицаЗначений;
    КС = Новый КвалификаторыСтроки(250);
	Массив = Новый Массив;
    Массив.Добавить(Тип("Строка"));
    ОписаниеТиповС = Новый ОписаниеТипов(Массив, , , ,КС);
    Массив.Очистить();
	Для Каждого Соответствие Из СтруктураСоответствияКолонокТаблицы Цикл
		ТаблицаТоваров.Колонки.Добавить(Соответствие.Ключ, ОписаниеТиповС);
	КонецЦикла;
	
	//начинаем парсить товары, начиная со строки (ИндексСтрокиЗаголовка + 3). Заканчиваем, когда встречаем в колонке "Номенклатура" словосочетание "Всего к оплате";
	СчётчикСтрок = 1;
	Для Каждого СтрокаПолнойТаблицы Из ТаблицаПолная Цикл
		Попытка
			НомерСтроки = Число(СтрокаПолнойТаблицы[СтруктураСоответствияКолонокТаблицы.НомерСтроки]);
			Если НомерСтроки <> СчётчикСтрок Тогда Продолжить КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;
		СчётчикСтрок = СчётчикСтрок + 1;
		НоваяСтрока = ТаблицаТоваров.Добавить();
		Попытка
			Для Каждого Соответствие Из СтруктураСоответствияКолонокТаблицы Цикл
				
				Если Соответствие.Ключ = "АртикулТовара" Тогда //преобразуем "художества" поставщика в стандартную форму
					Значение = ДоработкиСервер.ОчиститьСтрокуОтСпецСимволов(СтрокаПолнойТаблицы[Соответствие.Значение])
				Иначе
					Если Соответствие.Значение = "НЕ_ИСПОЛЬЗУЕТСЯ" Тогда
						Значение = "";
					Иначе
						Значение = СтрокаПолнойТаблицы[Соответствие.Значение];
					КонецЕсли;
				КонецЕсли;
				НоваяСтрока[Соответствие.Ключ] = Значение;
			КонецЦикла;
		Исключение
			ТаблицаТоваров.Очистить(); //Если возникла любая проблема при чтении значений из сопоставленных с настройками колонок, значит документ имеет "неверный" формат и его загружать не нужно
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ОпределитьСоответствиеКолонок(Контрагент)
	
	Результат = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиАвтозагрузкиПоступленийТоваров.НачальнаяСтрока,
	               |	НастройкиАвтозагрузкиПоступленийТоваров.КолонкаНумерации,
	               |	НастройкиАвтозагрузкиПоступленийТоваров.Артикул,
	               |	НастройкиАвтозагрузкиПоступленийТоваров.Количество,
	               |	НастройкиАвтозагрузкиПоступленийТоваров.Сумма,
	               |	НастройкиАвтозагрузкиПоступленийТоваров.НовыйФормат
	               |ИЗ
	               |	РегистрСведений.НастройкиАвтозагрузкиПоступленийТоваров КАК НастройкиАвтозагрузкиПоступленийТоваров
	               |ГДЕ
	               |	НастройкиАвтозагрузкиПоступленийТоваров.Контрагент = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Результат = Новый Структура("НачальнаяСтрока, НомерСтроки, АртикулТовара, Количество, Сумма, НовыйФормат", Выборка.НачальнаяСтрока, Выборка.КолонкаНумерации, Выборка.Артикул, Выборка.Количество, Выборка.Сумма, Выборка.НовыйФормат);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьКолонкиТаблицыТоваровПоНастройкам(ТаблицаПолная, СоответствиеКолонок) Экспорт
	
	СтруктураСоответствияКолонокТаблицы = Новый Структура;
	
	СтруктураСоответствияКолонокТаблицы.Вставить("НомерСтроки", "К_" + Строка(СоответствиеКолонок.НомерСтроки));
	СтруктураСоответствияКолонокТаблицы.Вставить("АртикулТовара", "К_" + Строка(СоответствиеКолонок.АртикулТовара));
	СтруктураСоответствияКолонокТаблицы.Вставить("Номенклатура", "НЕ_ИСПОЛЬЗУЕТСЯ");
	СтруктураСоответствияКолонокТаблицы.Вставить("КодЕдиницыИзмерения", "НЕ_ИСПОЛЬЗУЕТСЯ");
	СтруктураСоответствияКолонокТаблицы.Вставить("ЕдиницаИзмерения", "НЕ_ИСПОЛЬЗУЕТСЯ");
	СтруктураСоответствияКолонокТаблицы.Вставить("Количество", "К_" + Строка(СоответствиеКолонок.Количество));
	
	СтруктураСоответствияКолонокТаблицы.Вставить("Цена", "НЕ_ИСПОЛЬЗУЕТСЯ");
	СтруктураСоответствияКолонокТаблицы.Вставить("СуммаБезНалога", "НЕ_ИСПОЛЬЗУЕТСЯ");
	СтруктураСоответствияКолонокТаблицы.Вставить("СтоимостьАкциза", "НЕ_ИСПОЛЬЗУЕТСЯ");
	СтруктураСоответствияКолонокТаблицы.Вставить("НалоговаяСтавка", "НЕ_ИСПОЛЬЗУЕТСЯ");
	СтруктураСоответствияКолонокТаблицы.Вставить("СуммаНалога", "НЕ_ИСПОЛЬЗУЕТСЯ");
	
	СтруктураСоответствияКолонокТаблицы.Вставить("Сумма", "К_" + Строка(СоответствиеКолонок.Сумма));
	
	СтруктураСоответствияКолонокТаблицы.Вставить("КодСтраныПроисхождения", "НЕ_ИСПОЛЬЗУЕТСЯ");
	СтруктураСоответствияКолонокТаблицы.Вставить("НаименованиеСтраныПроисхождения", "НЕ_ИСПОЛЬЗУЕТСЯ");
	СтруктураСоответствияКолонокТаблицы.Вставить("КолонкаНомерГТД", "НЕ_ИСПОЛЬЗУЕТСЯ");
	
	Возврат СтруктураСоответствияКолонокТаблицы;
	
КонецФункции

// Метод "Microsoft ADODB"/
//
// Параметры:
//        ФайлEXCEL - Полное имя файла (путь к файлу с именем файла и расширением).
//        ИмяЛиста - Имя выбранного листа файла EXCEL.
//        СтрокаЗаголовка (по умолчанию = 1) - Номер строки EXCEL, в которой расположены заголовки колонок.
//            Не используется, т.к. в СтрокеСоединения указано HDR=YES, а не HDR=NO.
//       В обработке 1-я строка анализируется для сопоставления колонок EXCEL с реквизитами 1С (справочники, докуметны, регистры).
//        НачСтрока (по-умолчанию = 0) - Номер начальной строки, начиная с которой считываются данные из EXCEL.
//        КонСтрока (по-умолчанию = 0) - Номер конечной строки, которой заканчиваются считываемые данные из EXCEL.
//            Если НачСтрока=0 и КонСтрока=0, то считывается вся таблица, находящаяся на листе EXCEL.
//        КолвоСтрокExcel - Количество строк на листе "ИмяЛиста" EXCEL. Возвращается в вызываемую процедуру.
//        ПодключениеADODB - тип драйвера ADODB для подключения к EXCEL.
//
// Возвращаемые значения:
//         ТаблицаРезультат - Результат считывания с листа "ИмяЛиста" EXCEL.
//
Функция ЗагрузитьМетодом_MSADODB_Универсальный(Знач ФайлEXCEL, Знач ИмяЛиста, Знач СтрокаЗаголовка = 1, НачСтрока = 0, КонСтрока = 0, КолвоСтрокExcel, 
 Знач ПодключениеADODB = "MicrosoftJetOLEDB40", АдресВременногоХранилища = Неопределено) Экспорт
    Перем СonnectionString, ADODBConnection, ADODBRecordset, ТекстЗапроса;
    Перем КолвоКолонокExcel, Поле, Колонка, ИмяКолонки;
    Перем НоваяСтрока, НомерСтроки;
    Перем ТаблицаРезультат;
	
	Если АдресВременногоХранилища <> Неопределено Тогда
		ФайлДляЗагрузки = Новый Файл(ФайлEXCEL);
		Расширениефайла = ФайлДляЗагрузки.Расширение;
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		ФайлEXCEL = ИмяВременногоФайла;
	КонецЕсли;
	
    // Нумерация MS ADODB начинается с 1.
    
    // Переменная "СтрокаЗаголовка", не используется, т.к. HDR=YES, а не HDR=NO.
    // HDR=YES:
    // 1. Считывание заголовков колонок с 1-ой строки.
    // 2. Считываемые данные со 2-ой и последующих строк типизированы. Для варианта HDR=NO: считываемые данные - строка.
    
    // Строка соединения - определение драйвера, который будет использован для подключения к файлу EXCEL.
    Если ПодключениеADODB = "MicrosoftACEOLEDB12" Тогда
        
        // ACE.OLEDB.12.0 - Для использования данного подключения необходимо дополнительное ПО:
        // Microsoft Access Database Engine 2010 Redistributable 32/64 bit.
        СonnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source= " + СокрЛП(ФайлEXCEL) + ";Extended Properties=""Excel 12.0;HDR=YES;IMEX=1;""";
        
        // Еще один вариант.
        //СтрокаСоединения = "Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};Dbq=" + СокрЛП(ФайлEXCEL) + ";";
        
    Иначе
        
        // Jet.OLEDB.4.0 - Стандартное подключение, как правило, не требующее установки дополнительного ПО. 
        // Рекомендуется установить последний Service Pack Windows.
        СonnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source= "  + СокрЛП(ФайлEXCEL) + ";Extended Properties=""Excel 8.0;HDR=YES;IMEX=1;""";
        
        // Еще один вариант.
        //СтрокаСоединения = "Driver={Microsoft Excel Driver (*.xls)};Dbq=" + СокрЛП(ФайлEXCEL) + ";";
        
    КонецЕсли;
    
    Попытка
        // Инициализация основного объекта ADODB.Connection. Открытие соединения.
        ADODBConnection = Новый COMОбъект("ADODB.Connection");
        ADODBConnection.ConnectionString =  СonnectionString;
        ADODBConnection.Open();
        // Импирически определенный параметр для правильного определения количества строк листа.
        ADODBConnection.CursorLocation = 3;    // По-умолчанию 2.
    Исключение
		Результат = ДоработкиСервер.СформироватьЗадачуДляПользователя(	Справочники.Пользователи.НЕКТО
																		, "Ошибка инициализации OLEDB"
																		, "Строка соединения: " + Строка(СonnectionString)
																		, 
																		, 
																		, Справочники.ВариантыОповещений.ОшибкаИнициализацииOLE);
        Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецПопытки;
    
    
    
    // Создание Recordset. Дочерний объект ADODBConnection. Набор записей по запросу.
	УспехРаспознаванияИмени = Ложь;
	ADODBRecordset = Новый COMОбъект("ADODB.Recordset");
	Попытка
		ИмяЛиста = "TDSheet";
		ТекстЗапроса = "SELECT * FROM [" + ИмяЛиста + "$]";
        ADODBRecordset.Open(ТекстЗапроса, ADODBConnection);
		УспехРаспознаванияИмени = Истина;
	Исключение
	КонецПопытки;
	Если Не УспехРаспознаванияИмени Тогда
		Попытка
			ИмяЛиста = "Sheet";
			ТекстЗапроса = "SELECT * FROM [" + ИмяЛиста + "$]";
	        ADODBRecordset.Open(ТекстЗапроса, ADODBConnection);
			УспехРаспознаванияИмени = Истина;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если Не УспехРаспознаванияИмени Тогда
		Попытка
			ИмяЛиста = "Sheet1";
			ТекстЗапроса = "SELECT * FROM [" + ИмяЛиста + "$]";
	        ADODBRecordset.Open(ТекстЗапроса, ADODBConnection);
			УспехРаспознаванияИмени = Истина;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если Не УспехРаспознаванияИмени Тогда
		Попытка
			ИмяЛиста = "Page 1";
			ТекстЗапроса = "SELECT * FROM [" + ИмяЛиста + "$]";
	        ADODBRecordset.Open(ТекстЗапроса, ADODBConnection);
			УспехРаспознаванияИмени = Истина;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если Не УспехРаспознаванияИмени Тогда
		Попытка
			ИмяЛиста = "Page1";
			ТекстЗапроса = "SELECT * FROM [" + ИмяЛиста + "$]";
	        ADODBRecordset.Open(ТекстЗапроса, ADODBConnection);
			УспехРаспознаванияИмени = Истина;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если Не УспехРаспознаванияИмени Тогда
		Попытка
			ИмяЛиста = "Лист 1";
			ТекстЗапроса = "SELECT * FROM [" + ИмяЛиста + "$]";
	        ADODBRecordset.Open(ТекстЗапроса, ADODBConnection);
			УспехРаспознаванияИмени = Истина;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если Не УспехРаспознаванияИмени Тогда
		Попытка
			ИмяЛиста = "Лист1";
			ТекстЗапроса = "SELECT * FROM [" + ИмяЛиста + "$]";
	        ADODBRecordset.Open(ТекстЗапроса, ADODBConnection);
			УспехРаспознаванияИмени = Истина;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если Не УспехРаспознаванияИмени Тогда
		Попытка
			ИмяЛиста = "Накладная";
			ТекстЗапроса = "SELECT * FROM [" + ИмяЛиста + "$]";
	        ADODBRecordset.Open(ТекстЗапроса, ADODBConnection);
			УспехРаспознаванияИмени = Истина;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если Не УспехРаспознаванияИмени Тогда
		Попытка
			ИмяЛиста = "Формат КАИС";
			ТекстЗапроса = "SELECT * FROM [" + ИмяЛиста + "$]";
	        ADODBRecordset.Open(ТекстЗапроса, ADODBConnection);
			УспехРаспознаванияИмени = Истина;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если Не УспехРаспознаванияИмени Тогда
		Попытка
			ИмяЛиста = "sf";
			ТекстЗапроса = "SELECT * FROM [" + ИмяЛиста + "$]";
	        ADODBRecordset.Open(ТекстЗапроса, ADODBConnection);
			УспехРаспознаванияИмени = Истина;
		Исключение
		КонецПопытки;
	КонецЕсли;	
	Если Не УспехРаспознаванияИмени Тогда Возврат Новый ТаблицаЗначений КонецЕсли;	
	Попытка
        // Проверка заполненности листа.
        Если (ADODBRecordset.EOF ИЛИ ADODBRecordset.BOF) Тогда
            КолвоСтрокExcel = 0;
            
            // Завершение работы.
            // Закрытие Объектов.
            ADODBRecordset.Close();
            ADODBConnection.Close();
            ADODBRecordset   = Неопределено;
            ADODBConnection = Неопределено;
			Результат = ДоработкиСервер.СформироватьЗадачуДляПользователя(	Справочники.Пользователи.НЕКТО
																			, "Лист не содержит данных"
																			, "Файл " + Строка(ФайлEXCEL)
																			, 
																			, 
																			, Справочники.ВариантыОповещений.ОшибкаИнициализацииOLE);
            Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
        КонецЕсли;
        
        // Импирически определенные параметры для правильного определения количества строк листа.
        ADODBRecordset.AbsolutePage     = 1;
        ADODBRecordset.AbsolutePosition = 1;
    Исключение
		Результат = ДоработкиСервер.СформироватьЗадачуДляПользователя(	Справочники.Пользователи.НЕКТО
																		, "Не удалось инициализировать Recordset"
																		, "Файл " + Строка(ФайлEXCEL)
																		, 
																		, 
																		, Справочники.ВариантыОповещений.ОшибкаИнициализацииOLE);
        Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецПопытки;
    
    // Параметр, возвращаемый в вызывающую процедуру.
    КолвоСтрокExcel = ADODBRecordset.RecordCount + 1;    // (+1) - учет Строки-Заголовока, которая "съедается".
    КолвоКолонокExcel = ADODBRecordset.Fields.Count;
    
    // Проверка заполненности листа.
     Если КолвоСтрокExcel <= 2 Тогда
        КолвоСтрокExcel = 0;
        
        // Завершение работы.
        // Закрытие Объектов.
        ADODBRecordset.Close();
        ADODBConnection.Close();
        ADODBRecordset   = Неопределено;
        ADODBConnection = Неопределено;
        
        Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецЕсли;
    
    // Создание результирующей таблицы, в которую будут записываться считанные из EXCEL данные.
    ТаблицаРезультат = Новый ТаблицаЗначений;
    
    // Формирование колонок результирующей таблицы.
    
    // "НомерСтроки" - для наглядности и удобства.
    // В зависимости от разрабатываемой обработки.
    // "Сопоставлено" - может быть другим.
    // Здесь же могут быть добавлены другие колонки, не формируемые из содержимого файла EXCEL.
    ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
    ТаблицаРезультат.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"), "Сопоставлено", 1);
    Для ит = 1 ПО КолвоКолонокExcel Цикл
        
        Поле = ADODBRecordset.Fields.Item(ит - 1);
        ИмяКолонки = "К_" + ит;
        Колонка = ТаблицаРезультат.Колонки.Добавить(ИмяКолонки, , СокрЛП(СтрЗаменить(Поле.Name, "#", ".")));
        // Замена "#" на ".", т.к. при считывании ADODB "." в имени колонки заменяется на "#".
        
    КонецЦикла;
    
    // ТаблицаРезультат: 1-я строка - Строка-Заголовок.
    
    // Добавление этой строки обусловлено исключительно из соображений идентичности содержимого файла EXCEL и ТаблицыЗначений,
    // выводимой на форме Обработки, и дальнейшей обработки строки заголовка
    // с целью сопоставления колонок EXCEL и реквизитов 1С: для Справочников, ПВХ, Регистров, Документов.
    
    // Если в Вашей обработке в результирующей таблице в качестве 1-ой строки не нужна Строка-Заголовок, то
    // следует закомментировать следующий цикл:
	НоваяСтрока = ТаблицаРезультат.Добавить();
	НоваяСтрока.НомерСтроки = 1;
	
	Для ит = 1 ПО КолвоКолонокExcel Цикл
		
		ИмяКолонки = "К_" + ит;
		Колонка = ТаблицаРезультат.Колонки.Найти(ИмяКолонки);
		НоваяСтрока[ИмяКолонки] = Колонка.Заголовок;
		
	КонецЦикла;
	
	// ТаблицаРезультат: Формирование строк по указанному диапазону: НачСтрока - КонСтрока.

	НомерСтроки = 1;
	Пока ADODBRecordset.EOF() = 0 Цикл

		НомерСтроки = НомерСтроки + 1;

		Если НомерСтроки < НачСтрока Тогда    // Номер строки вне диапазона считываемых строк.
			ADODBRecordset.MoveNext();             // Следующая строка.
			Продолжить;
		КонецЕсли;

		Если КонСтрока > 0 И НомерСтроки > КонСтрока Тогда    // Номер строки вне диапазона считываемых строк.
			Прервать;
		КонецЕсли;

		НоваяСтрока = ТаблицаРезультат.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки;

		Для ит = 1 ПО КолвоКолонокExcel Цикл

		Поле = ADODBRecordset.Fields.Item(ит - 1);
		
		Если Поле.ActualSize = 0 Тогда        // Пустое поле EXCEL.
			Продолжить;
		КонецЕсли;
		
		ЗначениеЯчейки = Поле.Value;        // Учитывая параметр HDR=YES в строке соединения, данные считываются в соответствии с их типом.

		ИмяКолонки = "К_" + ит;
		НоваяСтрока[ИмяКолонки] = ЗначениеЯчейки;

		// Используется при формировании таблицы на форме обработки.
		ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
		ДлинаСтроки      = СтрДлина(СокрЛП(ЗначениеЯчейки));
		ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
		
		КонецЦикла;

		ADODBRecordset.MoveNext();   // Следующая строка.

	КонецЦикла;
    
    //УдалитьКолонкиСНулевойШириной(ТаблицаРезультат);
    
    // Завершение работы.
    // Закрытие Объектов.
	ADODBRecordset.Close();
	ADODBConnection.Close();
	ADODBRecordset	= Неопределено;
	ADODBConnection	= Неопределено;
	Если АдресВременногоХранилища <> Неопределено Тогда
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
			РезультатОповещения = ДоработкиСервер.СформироватьЗадачуДляПользователя(Справочники.Пользователи.НЕКТО
																					,"Ошибка удаления файла вложения после анализа"
																					,"Файл " + Строка(ИмяВременногоФайла)
																					,
																					,
																					,Справочники.ВариантыОповещений.ОшибкаИнициализацииOLE);
		КонецПопытки;
	КонецЕсли;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ЗагрузитьФайлВТаблицуЗначений(Знач ФайлEXCEL, АдресВременногоХранилища = Неопределено) Экспорт
	
	Если АдресВременногоХранилища <> Неопределено Тогда
		ФайлДляЗагрузки = Новый Файл(ФайлEXCEL);
		Расширениефайла = ФайлДляЗагрузки.Расширение;
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		ФайлEXCEL = ИмяВременногоФайла;
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Прочитать(ФайлEXCEL, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	
	ТабДокШапка = Новый ТабличныйДокумент;
	ТабЗначенийШапка = Новый ТаблицаЗначений;
	НоваяСтрокаШапка = ТабЗначенийШапка.Добавить();
	Для СчетчикКолонок = 1 По ТабДок.ШиринаТаблицы Цикл
		ТабЗначенийШапка.Колонки.Добавить("K_" + Строка(СчетчикКолонок));	
		НоваяСтрокаШапка[СчетчикКолонок - 1] = "K_" + Строка(СчетчикКолонок);
	КонецЦикла;
	
	Построитель = Новый ПостроительОтчета;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабЗначенийШапка);
	Построитель.ЗаполнитьНастройки();
	Построитель.Вывести(ТабДокШапка);
	
	ТабДокРезультат = Новый ТабличныйДокумент;
	ТабДокРезультат.Вывести(ТабДокШапка);
	ТабДокРезультат.Вывести(ТабДок);
	
	ПоследняяСтрока = ТабДокРезультат.ВысотаТаблицы;
	ПоследняяКолонка = ТабДокРезультат.ШиринаТаблицы;
	ОбластьЯчеек = ТабДокРезультат.Область(1, 1, ПоследняяСтрока, ПоследняяКолонка);
	ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);
	ПостроительОтчета = Новый ПостроительОтчета; 
	ПостроительОтчета.ИсточникДанных = ИсточникДанных;
	ПостроительОтчета.Выполнить();
	// Результат выгружаем в таблицу значений.
	ТаблицаПолная = ПостроительОтчета.Результат.Выгрузить();
	
	Если АдресВременногоХранилища <> Неопределено Тогда
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
			РезультатОповещения = ДоработкиСервер.СформироватьЗадачуДляПользователя(Справочники.Пользователи.НЕКТО
																					,"Ошибка удаления файла вложения после анализа"
																					,"Файл " + Строка(ИмяВременногоФайла)
																					,
																					,
																					,Справочники.ВариантыОповещений.ОшибкаИнициализацииOLE);
		КонецПопытки;
	КонецЕсли;
	
	Возврат ТаблицаПолная;
	
КонецФункции

Функция СформироватьТаблицуТоваров(ТаблицаПолная) Экспорт
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	КоличествоСтрокТаблицы = ТаблицаПолная.Количество() - 1;
	
	СтрокаЗаголовка = ТаблицаПолная.Найти("№ п/п");
	СтрокаОкончанияТаблицы = ТаблицаПолная.Найти("Всего к оплате");
	Если СтрокаЗаголовка = Неопределено ИЛИ СтрокаОкончанияТаблицы = Неопределено Тогда Возврат ТаблицаТоваров КонецЕсли;
	
	ИндексСтрокиЗаголовка = ТаблицаПолная.Индекс(СтрокаЗаголовка);
	ИндексСтрокиОкончанияТаблицы = ТаблицаПолная.Индекс(СтрокаОкончанияТаблицы) - 1;
	
	СтруктураСоответствияКолонокТаблицы = ОпределитьКолонкиТаблицыТоваров(ТаблицаПолная, ИндексСтрокиЗаголовка + 2);
	КС = Новый КвалификаторыСтроки(250);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , , ,КС);
	Массив.Очистить();
	Для Каждого Соответствие Из СтруктураСоответствияКолонокТаблицы Цикл
		ТаблицаТоваров.Колонки.Добавить(Соответствие.Ключ, ОписаниеТиповС);
	КонецЦикла;
	
	//начинаем парсить товары, начиная со строки (ИндексСтрокиЗаголовка + 3). Заканчиваем, когда встречаем в колонке "Номенклатура" словосочетание "Всего к оплате";
	Для ИндексСтроки = ИндексСтрокиЗаголовка + 3 По ИндексСтрокиОкончанияТаблицы Цикл
		Попытка
			НомерСтроки = Число(ТаблицаПолная[ИндексСтроки][СтруктураСоответствияКолонокТаблицы.НомерСтроки]);
		Исключение
			Продолжить;
		КонецПопытки;
		НоваяСтрока = ТаблицаТоваров.Добавить();
		Для Каждого Соответствие Из СтруктураСоответствияКолонокТаблицы Цикл
			Если Соответствие.Ключ = "АртикулТовара" Тогда //преобразуем "художества" поставщика в стандартную форму
				Значение = ДоработкиСервер.ОчиститьСтрокуОтСпецСимволов(ТаблицаПолная[ИндексСтроки][Соответствие.Значение])
			Иначе
				Значение = ТаблицаПолная[ИндексСтроки][Соответствие.Значение];
			КонецЕсли;
			НоваяСтрока[Соответствие.Ключ] = Значение;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ОпределитьКолонкиТаблицыТоваров(ТаблицаПолная, ИндексСтрокиОпределенияКолонок)
	
	СтруктураСоответствияКолонокТаблицы = Новый Структура;
	
	СтрокаОпределенияКолонок = ТаблицаПолная.Получить(ИндексСтрокиОпределенияКолонок);
	Для Каждого КолонкаТаблицы Из ТаблицаПолная.Колонки Цикл 
		
		ЗначениеВЯчейке = СтрокаОпределенияКолонок[КолонкаТаблицы.Имя];
		Если ЗначениеВЯчейке = "А" Тогда
			СтруктураСоответствияКолонокТаблицы.Вставить("НомерСтроки", КолонкаТаблицы.Имя);
		ИначеЕсли ЗначениеВЯчейке = "Б" Тогда
			СтруктураСоответствияКолонокТаблицы.Вставить("АртикулТовара", КолонкаТаблицы.Имя);
		ИначеЕсли ЗначениеВЯчейке = "1" Тогда
			СтруктураСоответствияКолонокТаблицы.Вставить("Номенклатура", КолонкаТаблицы.Имя);
		ИначеЕсли ЗначениеВЯчейке = "2" Тогда
			СтруктураСоответствияКолонокТаблицы.Вставить("КодЕдиницыИзмерения", КолонкаТаблицы.Имя);
		ИначеЕсли ЗначениеВЯчейке = "2а" Тогда
			СтруктураСоответствияКолонокТаблицы.Вставить("ЕдиницаИзмерения", КолонкаТаблицы.Имя);
		ИначеЕсли ЗначениеВЯчейке = "3" Тогда
			СтруктураСоответствияКолонокТаблицы.Вставить("Количество", КолонкаТаблицы.Имя);
		ИначеЕсли ЗначениеВЯчейке = "4" Тогда
			СтруктураСоответствияКолонокТаблицы.Вставить("Цена", КолонкаТаблицы.Имя);
		ИначеЕсли ЗначениеВЯчейке = "5" Тогда
			СтруктураСоответствияКолонокТаблицы.Вставить("СуммаБезНалога", КолонкаТаблицы.Имя);
		ИначеЕсли ЗначениеВЯчейке = "6" Тогда
			СтруктураСоответствияКолонокТаблицы.Вставить("СтоимостьАкциза", КолонкаТаблицы.Имя);
		ИначеЕсли ЗначениеВЯчейке = "7" Тогда
			СтруктураСоответствияКолонокТаблицы.Вставить("НалоговаяСтавка", КолонкаТаблицы.Имя);
		ИначеЕсли ЗначениеВЯчейке = "8" Тогда
			СтруктураСоответствияКолонокТаблицы.Вставить("СуммаНалога", КолонкаТаблицы.Имя);
		ИначеЕсли ЗначениеВЯчейке = "9" Тогда
			СтруктураСоответствияКолонокТаблицы.Вставить("Сумма", КолонкаТаблицы.Имя);
		ИначеЕсли ЗначениеВЯчейке = "10" Тогда
			СтруктураСоответствияКолонокТаблицы.Вставить("КодСтраныПроисхождения", КолонкаТаблицы.Имя);
		ИначеЕсли ЗначениеВЯчейке = "10а" Тогда
			СтруктураСоответствияКолонокТаблицы.Вставить("НаименованиеСтраныПроисхождения", КолонкаТаблицы.Имя);
		ИначеЕсли ЗначениеВЯчейке = "11" Тогда
			СтруктураСоответствияКолонокТаблицы.Вставить("КолонкаНомерГТД", КолонкаТаблицы.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураСоответствияКолонокТаблицы;
	
КонецФункции

Функция ОпределитьПоставщикаИСписокОжидаемыхБрендов(Контрагент) Экспорт
	
	Результат = Новый Структура("ТаблицаОжидаемыхБрендов, Контрагент", Новый ТаблицаЗначений, Контрагент);
	
	Запрос = Новый Запрос;
	
	Если ДоработкиСерверныеОбработки.ПолучитьЗначениеПеременнойОтладки("ЗагрузкаПоступленийПоХолдингамПоставщиков") Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказПоставщикуТовары.Номенклатура,
		               |	СУММА(ЗаказПоставщикуТовары.Количество) КАК Количество
		               |ПОМЕСТИТЬ ВсеЗаказыПоставщику
		               |ИЗ
		               |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		               |ГДЕ
		               |	ЗаказПоставщикуТовары.Ссылка.Проведен
		               |	И ЗаказПоставщикуТовары.Ссылка.СостояниеЗаказаПоставщика В(&СостояниеЗаказаПоставщика)
		               |	И ЗаказПоставщикуТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		               |	И ЗаказПоставщикуТовары.Ссылка.Контрагент В (&СписокКонтрагентов)
		               |	И НЕ ЗаказПоставщикуТовары.Отказ
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЗаказПоставщикуТовары.Номенклатура
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
		               |	СУММА(ЗаказыПоставщикамОстатки.КоличествоОстаток) КАК КоличествоКонечныйОстаток
		               |ПОМЕСТИТЬ ОжидаемыеПоступления
		               |ИЗ
		               |	ВсеЗаказыПоставщику КАК ВсеЗаказыПоставщику
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикамОстатки
		               |		ПО ВсеЗаказыПоставщику.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЗаказыПоставщикамОстатки.Номенклатура
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ОжидаемыеПоступления.Номенклатура,
		               |	СУММА(ОжидаемыеПоступления.КоличествоКонечныйОстаток - ЕСТЬNULL(НепроведенныеПоступления.Количество, 0)) КАК ОжидаемоеКоличество
		               |ПОМЕСТИТЬ ОжидаемыеПоступленияМинусНепроведенныеПоступления
		               |ИЗ
		               |	ОжидаемыеПоступления КАК ОжидаемыеПоступления
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
		               |			СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество
		               |		ИЗ
		               |			Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		               |		ГДЕ
		               |			НЕ ПоступлениеТоваровУслугТовары.Ссылка.ПометкаУдаления
		               |			И НЕ ПоступлениеТоваровУслугТовары.Ссылка.Проведен
		               |			И ПоступлениеТоваровУслугТовары.Ссылка.Контрагент В (&СписокКонтрагентов)
		               |			И ПоступлениеТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			ПоступлениеТоваровУслугТовары.Номенклатура) КАК НепроведенныеПоступления
		               |		ПО ОжидаемыеПоступления.Номенклатура = НепроведенныеПоступления.Номенклатура
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ОжидаемыеПоступления.Номенклатура
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	МАКСИМУМ(ОжидаемыеПоступленияМинусНепроведенныеПоступления.Номенклатура) КАК Номенклатура,
		               |	ОжидаемыеПоступленияМинусНепроведенныеПоступления.Номенклатура.СлужебныйАртикул КАК СлужебныйАртикул
		               |ПОМЕСТИТЬ ОжидаемаяНоменклатураСАртикулами
		               |ИЗ
		               |	ОжидаемыеПоступленияМинусНепроведенныеПоступления КАК ОжидаемыеПоступленияМинусНепроведенныеПоступления
		               |ГДЕ
		               |	ОжидаемыеПоступленияМинусНепроведенныеПоступления.ОжидаемоеКоличество > 0
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ОжидаемыеПоступленияМинусНепроведенныеПоступления.Номенклатура.СлужебныйАртикул
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	МАКСИМУМ(ОжидаемаяНоменклатураСАртикулами.Номенклатура) КАК Номенклатура,
		               |	ОжидаемаяНоменклатураСАртикулами.СлужебныйАртикул,
		               |	ОжидаемаяНоменклатураСАртикулами.Номенклатура.Производитель КАК Производитель
		               |ИЗ
		               |	ОжидаемаяНоменклатураСАртикулами КАК ОжидаемаяНоменклатураСАртикулами
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ОжидаемаяНоменклатураСАртикулами.СлужебныйАртикул,
		               |	ОжидаемаяНоменклатураСАртикулами.Номенклатура.Производитель
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВсеЗаказыПоставщику
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ОжидаемыеПоступления
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ОжидаемыеПоступленияМинусНепроведенныеПоступления
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ОжидаемаяНоменклатураСАртикулами";
		СостояниеЗаказаПоставщика = Новый СписокЗначений;
		СостояниеЗаказаПоставщика.Добавить(Перечисления.СостояниеЗаказаПоставщика.ОтправленаЗаявкаПоставщику);//Arsen: {14.12.2017г. Новое состояние заказа поставщику. Заказчик Кульбикаян М.Х.}
		СостояниеЗаказаПоставщика.Добавить(Перечисления.СостояниеЗаказаПоставщика.ОжидаетОтветаПоставщика);
		СостояниеЗаказаПоставщика.Добавить(Перечисления.СостояниеЗаказаПоставщика.ОтправленПоставщику);
		СостояниеЗаказаПоставщика.Добавить(Перечисления.СостояниеЗаказаПоставщика.Подтвержден);
		Запрос.УстановитьПараметр("СписокКонтрагентов", ПолучитьСписокКонтрагентовХолдинга(Контрагент));
		Запрос.УстановитьПараметр("СостояниеЗаказаПоставщика", СостояниеЗаказаПоставщика);
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ТекущаяДата()) - 15552000);
		Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДата() + 15552000);
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказПоставщикуТовары.Номенклатура,
		               |	СУММА(ЗаказПоставщикуТовары.Количество) КАК Количество
		               |ПОМЕСТИТЬ ВсеЗаказыПоставщику
		               |ИЗ
		               |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		               |ГДЕ
		               |	ЗаказПоставщикуТовары.Ссылка.Проведен
		               |	И ЗаказПоставщикуТовары.Ссылка.СостояниеЗаказаПоставщика В(&СостояниеЗаказаПоставщика)
		               |	И ЗаказПоставщикуТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		               |	И ЗаказПоставщикуТовары.Ссылка.Контрагент = &Контрагент
		               |	И НЕ ЗаказПоставщикуТовары.Отказ
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЗаказПоставщикуТовары.Номенклатура
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
		               |	СУММА(ЗаказыПоставщикамОстатки.КоличествоОстаток) КАК КоличествоКонечныйОстаток
		               |ПОМЕСТИТЬ ОжидаемыеПоступления
		               |ИЗ
		               |	ВсеЗаказыПоставщику КАК ВсеЗаказыПоставщику
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикамОстатки
		               |		ПО ВсеЗаказыПоставщику.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЗаказыПоставщикамОстатки.Номенклатура
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ОжидаемыеПоступления.Номенклатура,
		               |	СУММА(ОжидаемыеПоступления.КоличествоКонечныйОстаток - ЕСТЬNULL(НепроведенныеПоступления.Количество, 0)) КАК ОжидаемоеКоличество
		               |ПОМЕСТИТЬ ОжидаемыеПоступленияМинусНепроведенныеПоступления
		               |ИЗ
		               |	ОжидаемыеПоступления КАК ОжидаемыеПоступления
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
		               |			СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество
		               |		ИЗ
		               |			Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		               |		ГДЕ
		               |			НЕ ПоступлениеТоваровУслугТовары.Ссылка.ПометкаУдаления
		               |			И НЕ ПоступлениеТоваровУслугТовары.Ссылка.Проведен
		               |			И ПоступлениеТоваровУслугТовары.Ссылка.Контрагент = &Контрагент
		               |			И ПоступлениеТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			ПоступлениеТоваровУслугТовары.Номенклатура) КАК НепроведенныеПоступления
		               |		ПО ОжидаемыеПоступления.Номенклатура = НепроведенныеПоступления.Номенклатура
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ОжидаемыеПоступления.Номенклатура
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	МАКСИМУМ(ОжидаемыеПоступленияМинусНепроведенныеПоступления.Номенклатура) КАК Номенклатура,
		               |	ОжидаемыеПоступленияМинусНепроведенныеПоступления.Номенклатура.СлужебныйАртикул КАК СлужебныйАртикул
		               |ПОМЕСТИТЬ ОжидаемаяНоменклатураСАртикулами
		               |ИЗ
		               |	ОжидаемыеПоступленияМинусНепроведенныеПоступления КАК ОжидаемыеПоступленияМинусНепроведенныеПоступления
		               |ГДЕ
		               |	ОжидаемыеПоступленияМинусНепроведенныеПоступления.ОжидаемоеКоличество > 0
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ОжидаемыеПоступленияМинусНепроведенныеПоступления.Номенклатура.СлужебныйАртикул
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	МАКСИМУМ(ОжидаемаяНоменклатураСАртикулами.Номенклатура) КАК Номенклатура,
		               |	ОжидаемаяНоменклатураСАртикулами.СлужебныйАртикул,
		               |	ОжидаемаяНоменклатураСАртикулами.Номенклатура.Производитель КАК Производитель
		               |ИЗ
		               |	ОжидаемаяНоменклатураСАртикулами КАК ОжидаемаяНоменклатураСАртикулами
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ОжидаемаяНоменклатураСАртикулами.СлужебныйАртикул,
		               |	ОжидаемаяНоменклатураСАртикулами.Номенклатура.Производитель
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВсеЗаказыПоставщику
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ОжидаемыеПоступления
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ОжидаемыеПоступленияМинусНепроведенныеПоступления
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ОжидаемаяНоменклатураСАртикулами";
		СостояниеЗаказаПоставщика = Новый СписокЗначений;
		СостояниеЗаказаПоставщика.Добавить(Перечисления.СостояниеЗаказаПоставщика.ОтправленаЗаявкаПоставщику);//Arsen: {14.12.2017г. Новое состояние заказа поставщику. Заказчик Кульбикаян М.Х.}
		СостояниеЗаказаПоставщика.Добавить(Перечисления.СостояниеЗаказаПоставщика.ОжидаетОтветаПоставщика);
		СостояниеЗаказаПоставщика.Добавить(Перечисления.СостояниеЗаказаПоставщика.ОтправленПоставщику);
		СостояниеЗаказаПоставщика.Добавить(Перечисления.СостояниеЗаказаПоставщика.Подтвержден);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("СостояниеЗаказаПоставщика", СостояниеЗаказаПоставщика);
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ТекущаяДата()) - 15552000);
		Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДата() + 15552000);
	КонецЕсли;
	
	ТаблицаОжидаемыхБрендов = Запрос.Выполнить().Выгрузить();
	Результат.Вставить("ТаблицаОжидаемыхБрендов", ТаблицаОжидаемыхБрендов);
	Возврат Результат;
КонецФункции

Функция ПолучитьСписокКонтрагентовХолдинга(Контрагент)
	Результат = Новый Массив;
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") И Контрагент <> Справочники.Контрагенты.ПустаяСсылка() И Контрагент.ГоловнойКонтрагент <> Справочники.Контрагенты.ПустаяСсылка() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Контрагенты.Ссылка КАК КонтрагентСсылка
		               |ПОМЕСТИТЬ КонтрагентыИХолдинги
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	Контрагенты.ГоловнойКонтрагент = &ГоловнойКонтрагент
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	Контрагенты.Ссылка
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	&Контрагент
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	КонтрагентыИХолдинги.КонтрагентСсылка
		               |ИЗ
		               |	КонтрагентыИХолдинги КАК КонтрагентыИХолдинги
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	КонтрагентыИХолдинги.КонтрагентСсылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ КонтрагентыИХолдинги";
		Запрос.УстановитьПараметр("ГоловнойКонтрагент", Контрагент.ГоловнойКонтрагент);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КонтрагентСсылка");
	Иначе
		Результат.Добавить(Контрагент);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьТаблицуТоваровАртикулыПроизводители(ТабличнаяЧастьТоваров, ТаблицаОжидаемыхБрендов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки,
		|	ТаблицаТоваров.АртикулТовара,
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.КодЕдиницыИзмерения,
		|	ТаблицаТоваров.Количество,
		|	ТаблицаТоваров.Цена,
		|	ТаблицаТоваров.СуммаБезНалога,
		|	ТаблицаТоваров.СтоимостьАкциза,
		|	ТаблицаТоваров.НалоговаяСтавка,
		|	ТаблицаТоваров.СуммаНалога,
		|	ТаблицаТоваров.Сумма,
		|	ТаблицаТоваров.КодСтраныПроисхождения,
		|	ТаблицаТоваров.КолонкаНомерГТД
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОжидаемыеБренды.СлужебныйАртикул,
		|	ОжидаемыеБренды.Производитель,
		|	ОжидаемыеБренды.Номенклатура
		|ПОМЕСТИТЬ ОжидаемыеБренды
		|ИЗ
		|	&ОжидаемыеБренды КАК ОжидаемыеБренды
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки,
		|	ТаблицаТоваров.Количество,
		|	ТаблицаТоваров.Цена,
		|	ТаблицаТоваров.СуммаБезНалога,
		|	ТаблицаТоваров.СтоимостьАкциза,
		|	ВЫБОР
		|		КОГДА ТаблицаТоваров.НалоговаяСтавка = ""18%""
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТаблицаТоваров.НалоговаяСтавка = ""10%""
		|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|			КОНЕЦ
		|	КОНЕЦ КАК СтавкаНДС,
		|	ТаблицаТоваров.СуммаНалога,
		|	ТаблицаТоваров.Сумма,
		|	ТаблицаТоваров.КодСтраныПроисхождения,
		|	ТаблицаТоваров.КолонкаНомерГТД,
		|	ОжидаемыеБренды.СлужебныйАртикул,
		|	ОжидаемыеБренды.Производитель,
		|	ОжидаемыеБренды.Номенклатура,
		|	НоменклатураСправочник.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	НоменклатураСправочник.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК КодЕдиницыИзмерения,
		|	КлассификаторСтранМира.НаименованиеПолное КАК НаименованиеСтраныПроисхождения,
		|	НоменклатураСправочник.Код,
		|	НоменклатураСправочник.Родитель,
		|	КлассификаторСтранМира.Ссылка КАК СтранаПроисхождения,
		|	ТаблицаТоваров.АртикулТовара КАК АртикулТовараЗагружаемогоДокумента
		|ПОМЕСТИТЬ ТаблицаВключаяНенайденныеТовары
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
		|		ПО ТаблицаТоваров.КодСтраныПроисхождения = КлассификаторСтранМира.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОжидаемыеБренды КАК ОжидаемыеБренды
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
		|			ПО ОжидаемыеБренды.Номенклатура = НоменклатураСправочник.Ссылка
		|		ПО ТаблицаТоваров.АртикулТовара = ОжидаемыеБренды.СлужебныйАртикул
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВключаяНенайденныеТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаВключаяНенайденныеТовары.Количество,
		|	ТаблицаВключаяНенайденныеТовары.Цена,
		|	ТаблицаВключаяНенайденныеТовары.СуммаБезНалога,
		|	ТаблицаВключаяНенайденныеТовары.СтоимостьАкциза,
		|	ТаблицаВключаяНенайденныеТовары.СтавкаНДС,
		|	ТаблицаВключаяНенайденныеТовары.СуммаНалога,
		|	ТаблицаВключаяНенайденныеТовары.Сумма,
		|	ТаблицаВключаяНенайденныеТовары.КодСтраныПроисхождения,
		|	ТаблицаВключаяНенайденныеТовары.КолонкаНомерГТД,
		|	ЕСТЬNULL(ТаблицаВключаяНенайденныеТовары.СлужебныйАртикул, ПодборНеожидаемыхАртикулов.СлужебныйАртикул) КАК СлужебныйАртикул,
		|	ЕСТЬNULL(ТаблицаВключаяНенайденныеТовары.Производитель, ПодборНеожидаемыхАртикулов.Производитель) КАК Производитель,
		|	ЕСТЬNULL(ТаблицаВключаяНенайденныеТовары.Номенклатура, ПодборНеожидаемыхАртикулов.Номенклатура) КАК Номенклатура,
		|	МАКСИМУМ(ЕСТЬNULL(ТаблицаВключаяНенайденныеТовары.ЕдиницаИзмерения, ПодборНеожидаемыхАртикулов.ЕдиницаИзмерения)) КАК ЕдиницаИзмерения,
		|	МАКСИМУМ(ЕСТЬNULL(ТаблицаВключаяНенайденныеТовары.КодЕдиницыИзмерения, ПодборНеожидаемыхАртикулов.КодЕдиницыИзмерения)) КАК КодЕдиницыИзмерения,
		|	МАКСИМУМ(ТаблицаВключаяНенайденныеТовары.НаименованиеСтраныПроисхождения) КАК НаименованиеСтраныПроисхождения,
		|	ЕСТЬNULL(ТаблицаВключаяНенайденныеТовары.Код, ПодборНеожидаемыхАртикулов.Код) КАК Код,
		|	ЕСТЬNULL(ТаблицаВключаяНенайденныеТовары.Родитель, ПодборНеожидаемыхАртикулов.Родитель) КАК Родитель,
		|	МАКСИМУМ(ТаблицаВключаяНенайденныеТовары.СтранаПроисхождения) КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ТаблицаВключаяНенайденныеТовары.Номенклатура ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПризнакНеожидаемогоТовара,
		|	ТаблицаВключаяНенайденныеТовары.АртикулТовараЗагружаемогоДокумента
		|ИЗ
		|	ТаблицаВключаяНенайденныеТовары КАК ТаблицаВключаяНенайденныеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НоменклатураДляНеизвестныхАртикулов.Номенклатура.Ссылка КАК Номенклатура,
		|			ТаблицаВключаяНенайденныеТовары.НомерСтроки КАК НомерСтроки,
		|			НоменклатураДляНеизвестныхАртикулов.Номенклатура.Производитель КАК Производитель,
		|			НоменклатураДляНеизвестныхАртикулов.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|			НоменклатураДляНеизвестныхАртикулов.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК КодЕдиницыИзмерения,
		|			НоменклатураДляНеизвестныхАртикулов.Номенклатура.Код КАК Код,
		|			НоменклатураДляНеизвестныхАртикулов.Номенклатура.Родитель КАК Родитель,
		|			ТаблицаВключаяНенайденныеТовары.АртикулТовараЗагружаемогоДокумента КАК СлужебныйАртикул
		|		ИЗ
		|			ТаблицаВключаяНенайденныеТовары КАК ТаблицаВключаяНенайденныеТовары
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					МАКСИМУМ(НоменклатураСправочник.Ссылка) КАК Номенклатура,
		|					ТаблицаВключаяНенайденныеТовары.АртикулТовараЗагружаемогоДокумента КАК СлужебныйАртикул
		|				ИЗ
		|					ТаблицаВключаяНенайденныеТовары КАК ТаблицаВключаяНенайденныеТовары
		|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
		|						ПО ТаблицаВключаяНенайденныеТовары.АртикулТовараЗагружаемогоДокумента = НоменклатураСправочник.СлужебныйАртикул
		|				ГДЕ
		|					ТаблицаВключаяНенайденныеТовары.Номенклатура ЕСТЬ NULL 
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ТаблицаВключаяНенайденныеТовары.АртикулТовараЗагружаемогоДокумента) КАК НоменклатураДляНеизвестныхАртикулов
		|				ПО ТаблицаВключаяНенайденныеТовары.АртикулТовараЗагружаемогоДокумента = НоменклатураДляНеизвестныхАртикулов.СлужебныйАртикул
		|		ГДЕ
		|			ТаблицаВключаяНенайденныеТовары.Номенклатура ЕСТЬ NULL ) КАК ПодборНеожидаемыхАртикулов
		|		ПО (ПодборНеожидаемыхАртикулов.НомерСтроки = ТаблицаВключаяНенайденныеТовары.НомерСтроки)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаВключаяНенайденныеТовары.АртикулТовараЗагружаемогоДокумента,
		|	ТаблицаВключаяНенайденныеТовары.КодСтраныПроисхождения,
		|	ТаблицаВключаяНенайденныеТовары.КолонкаНомерГТД,
		|	ТаблицаВключаяНенайденныеТовары.Сумма,
		|	ТаблицаВключаяНенайденныеТовары.Цена,
		|	ТаблицаВключаяНенайденныеТовары.СуммаБезНалога,
		|	ТаблицаВключаяНенайденныеТовары.СтавкаНДС,
		|	ТаблицаВключаяНенайденныеТовары.Количество,
		|	ТаблицаВключаяНенайденныеТовары.СтоимостьАкциза,
		|	ТаблицаВключаяНенайденныеТовары.СуммаНалога,
		|	ТаблицаВключаяНенайденныеТовары.НомерСтроки,
		|	ЕСТЬNULL(ТаблицаВключаяНенайденныеТовары.СлужебныйАртикул, ПодборНеожидаемыхАртикулов.СлужебныйАртикул),
		|	ЕСТЬNULL(ТаблицаВключаяНенайденныеТовары.Производитель, ПодборНеожидаемыхАртикулов.Производитель),
		|	ЕСТЬNULL(ТаблицаВключаяНенайденныеТовары.Номенклатура, ПодборНеожидаемыхАртикулов.Номенклатура),
		|	ЕСТЬNULL(ТаблицаВключаяНенайденныеТовары.Код, ПодборНеожидаемыхАртикулов.Код),
		|	ЕСТЬNULL(ТаблицаВключаяНенайденныеТовары.Родитель, ПодборНеожидаемыхАртикулов.Родитель),
		|	ВЫБОР
		|		КОГДА ТаблицаВключаяНенайденныеТовары.Номенклатура ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	Запрос.УстановитьПараметр("ТаблицаТоваров", ТабличнаяЧастьТоваров);
	Запрос.УстановитьПараметр("ОжидаемыеБренды", ТаблицаОжидаемыхБрендов);
	
	РезультирующаяТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультирующаяТаблица;
	
КонецФункции

Процедура СформироватьПоступление(Контрагент, ТаблицаТоваровАртикулыПроизводители, Отказ, Результат) Экспорт
	
	Организация = Контрагент.ОсновнойДоговорКонтрагента.Организация;
	ДокПоступление = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	ДокПоступление.Дата = НачалоДня(ТекущаяДата() + 86400);
	ДокПоступление.Организация = Организация;
	ДокПоступление.Контрагент = Контрагент;
	ДокПоступление.ИдентификаторыПартнеровПоставщика = Контрагент.ИдентификаторыПартнеровПоставщика;
	ДокПоступление.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	ДокПоступление.СкладОрдер = Справочники.Склады.ТранзитныйСклад;
	ДоговорКонтрагента = ПолучитьДоговор(Организация, Контрагент);
	ДокПоступление.ДоговорКонтрагента = ДоговорКонтрагента;
	ДокПоступление.ОтражатьВУправленческомУчете = Истина;
	ДокПоступление.РегистрироватьЦеныПоставщика = Истина;
	ДокПоступление.ТипЦен = ДоговорКонтрагента.ТипЦен;
	ДокПоступление.КурсВзаиморасчетов = 1;
	ДокПоступление.УчитыватьНДС = Ложь;
	ДокПоступление.КратностьВзаиморасчетов = 1;
	ДокПоступление.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643", Истина);
	ДокПоступление.КонтрагентДляБухгалтерии = Контрагент.ОсновнойКонтрагентДляБухгалтерии;
	ДокПоступление.ДоговорКонтрагентаДляБухгалтерии = Контрагент.ОсновнойДоговорКонтрагентаДляБухгалтерии;
	//заполним табличную часть
	Попытка
		Для Каждого СтрокаТоваров Из ТаблицаТоваровАртикулыПроизводители Цикл
			Если СтрокаТоваров.ЕдиницаИзмерения = NULL Тогда
				Если СтрокаТоваров.Номенклатура = NULL ИЛИ СтрокаТоваров.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
					ЕдиницаИзмеренияИзНоменклатуры = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
				Иначе
					ЕдиницаИзмеренияИзНоменклатуры = СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения;
				КонецЕсли;
			Иначе
				ЕдиницаИзмеренияИзНоменклатуры = СтрокаТоваров.ЕдиницаИзмерения;
			КонецЕсли;
			ЕдиницаИзмерения = ?(СтрокаТоваров.ЕдиницаИзмерения = NULL, Справочники.ЕдиницыИзмерения.ПустаяСсылка(), СтрокаТоваров.ЕдиницаИзмерения);
			НоваяСтрокаТабличнойЧасти = ДокПоступление.Товары.Добавить();
			НоваяСтрокаТабличнойЧасти.Артикул = СтрокаТоваров.СлужебныйАртикул;
			НоваяСтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмеренияИзНоменклатуры;
			НоваяСтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = ЕдиницаИзмеренияИзНоменклатуры;
			НоваяСтрокаТабличнойЧасти.Код = ?(СтрокаТоваров.Код = NULL, "", СтрокаТоваров.Код);
			НоваяСтрокаТабличнойЧасти.Родитель = ?(СтрокаТоваров.Родитель = NULL, Справочники.Номенклатура.ПустаяСсылка(), СтрокаТоваров.Родитель);
			НоваяСтрокаТабличнойЧасти.Производитель = ?(СтрокаТоваров.Производитель = NULL, Справочники.Производители.ПустаяСсылка(), СтрокаТоваров.Производитель);
			НоваяСтрокаТабличнойЧасти.Номенклатура = ?(СтрокаТоваров.Номенклатура = NULL, Справочники.Номенклатура.ПустаяСсылка(), СтрокаТоваров.Номенклатура);
			НоваяСтрокаТабличнойЧасти.Количество = Число(СтрокаТоваров.Количество);
			НоваяСтрокаТабличнойЧасти.Коэффициент = 1;
			НоваяСтрокаТабличнойЧасти.Цена = ?(Число(СтрЗаменить(СтрокаТоваров.Количество, " ", "")) = 0, 0,Число(СтрЗаменить(СтрокаТоваров.Сумма, " ", "")) / Число(СтрЗаменить(СтрокаТоваров.Количество, " ", "")));
			НоваяСтрокаТабличнойЧасти.Сумма = Число(СтрЗаменить(СтрокаТоваров.Сумма, " ", ""));
			НоваяСтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			НоваяСтрокаТабличнойЧасти.СуммаНДС = 0;
			НоваяСтрокаТабличнойЧасти.СтранаПроисхождения = СтрокаТоваров.СтранаПроисхождения;
		КонецЦикла;
		ДокПоступление.Ответственный = Контрагент.ОсновнойМенеджерПокупателя;
		ДокПоступление.Товары.Загрузить(ДоработкиСервер.ЗаполнитьГТДВДокументе(ДокПоступление.Товары.Выгрузить(),ТекущаяДата(),Истина));
		ДокПоступление.Комментарий = "НЕ РАСПРЕДЕЛЕНО!";
	Исключение
		Результат = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
		Отказ = Истина;
		Возврат;
		Результат = ДоработкиСервер.СформироватьЗадачуДляПользователя(	Справочники.Пользователи.НЕКТО
																		, "Ошибка при заполнении создаваемого поступления"
																		, "Ошибка при заполнении создаваемого поступления от контрагента: " + Строка(Контрагент)
																		, Контрагент.ОсновнойМенеджерПокупателя
																		,
																		, Справочники.ВариантыОповещений.УспешноЗагруженОтветПоставщика);

	КонецПопытки;
	Если ДокПоступление.Товары.Количество() = 0 Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	Попытка
		ДокПоступление.Записать(РежимЗаписиДокумента.Запись);
		Результат = ДокПоступление.Ссылка;
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьДоговор(Организация, Контрагент, ВозвращатьТолькоПервые = Истина)
	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов;
	СтруктураПараметровДляПолученияДоговора = Новый Структура("СписокДопустимыхВидовДоговоров", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовВзаиморасчетов", Неопределено);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВалютаВзаиморасчетовДоговора", Неопределено);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВидСравненияВалютыВзаиморасчетов", Неопределено);
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ПарКонтрагент",  Контрагент);
	Запрос.УстановитьПараметр("ПарВидДоговора", СписокДопустимыхВидовДоговоров);
	Запрос.УстановитьПараметр("ПарВидВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
	Запрос.УстановитьПараметр("ПарВалютаВзаиморасчетов", ВалютаВзаиморасчетовДоговора);
	Запрос.УстановитьПараметр("ПарОрганизация", Организация);

	ПсевдонимТаблицы = "ДоговорыКонтрагентов"; 
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ"
	+?(ВозвращатьТолькоПервые," ПЕРВЫЕ 1","") + "
	|	ДоговорыКонтрагентов.Ссылка КАК Договор";
	
	
	Запрос.Текст = Запрос.Текст  + "
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК " + ПсевдонимТаблицы + "
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)"
	+?(ЗначениеЗаполнено(Организация), "	И ДоговорыКонтрагентов.Организация = &ПарОрганизация", "") + "
	|	И ДоговорыКонтрагентов.Владелец    = &ПарКонтрагент"
	+?(ВалютаВзаиморасчетовДоговора = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов " 
	+?(ВидСравненияВалютыВзаиморасчетов = Неопределено, "=", ВидСравненияВалютыВзаиморасчетов) + "(&ПарВалютаВзаиморасчетов)
	|")
	+?(СписокДопустимыхВидовДоговоров = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВидДоговора В (&ПарВидДоговора)
	|")
	+?(СписокДопустимыхВидовВзаиморасчетов = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВедениеВзаиморасчетов В (&ПарВидВзаиморасчетов)
	|");

	Если ЗначениеЗаполнено(Организация) Тогда 

		Запрос.Текст = Запрос.Текст + "
		|	И (ВЫБОР КОГДА ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.Организация = &ПарОрганизация"
		+?(ВалютаВзаиморасчетовДоговора = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов " 
		+?(ВидСравненияВалютыВзаиморасчетов = Неопределено, "=", ВидСравненияВалютыВзаиморасчетов) + "&ПарВалютаВзаиморасчетов
		|")
		+?(СписокДопустимыхВидовДоговоров = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВидДоговора В (&ПарВидДоговора)
		|")
		+?(СписокДопустимыхВидовВзаиморасчетов = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВедениеВзаиморасчетов В (&ПарВидВзаиморасчетов)
		|")
		+ "
		|	         ТОГДА ДоговорыКонтрагентов.Ссылка  = ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента
		|	         ИНАЧЕ ДоговорыКонтрагентов.Ссылка <> ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента КОНЕЦ)";

	КонецЕсли;
	
	ТаблицаДоговоров = Запрос.Выполнить().Выгрузить();
	Если ТаблицаДоговоров.Количество() = 0 Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Иначе
		Возврат ТаблицаДоговоров[0].Договор;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьКонтрагента(Email)
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаСнабжение1);
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаСнабжение2);
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаСнабжение3);
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаСбыт1);
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаСбыт2);
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаСбыт3);
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Объект,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КонтактнаяИнформация.Объект) КАК КоличествоРазличных
	               |ПОМЕСТИТЬ КонтрагентыСКоличеством
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	               |	И КонтактнаяИнформация.Представление ПОДОБНО &ЭлектронныйАдрес
	               |	И КонтактнаяИнформация.Объект ССЫЛКА Справочник.Контрагенты
	               |	И КонтактнаяИнформация.Вид В(&МассивВидовКонтактнойИнформации)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КонтактнаяИнформация.Объект
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтрагентыСКоличеством.Объект КАК Контрагент
	               |ИЗ
	               |	КонтрагентыСКоличеством КАК КонтрагентыСКоличеством
	               |ГДЕ
	               |	КонтрагентыСКоличеством.КоличествоРазличных = 1
	               |	И КонтрагентыСКоличеством.Объект.ЗагружатьДокументыПоставщика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ КонтрагентыСКоличеством";
	Запрос.УстановитьПараметр("ЭлектронныйАдрес", EMail);
	Запрос.УстановитьПараметр("МассивВидовКонтактнойИнформации", МассивВидовКонтактнойИнформации);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 1 Тогда Возврат Контрагент КонецЕсли;
	Пока Выборка.Следующий() Цикл 
		Контрагент = Выборка.Контрагент;
		Если НЕ Контрагент.ЗагружатьДокументыПоставщика Тогда Контрагент = Справочники.Контрагенты.ПустаяСсылка() КонецЕсли;
	КонецЦикла;
	Возврат Контрагент;
КонецФункции
//Киричков>>

Функция СформироватьТаблицуЗначенийИзФайла(Знач ФайлEXCEL, АдресВременногоХранилища = Неопределено, МассивРазрешенныхИменКолонок = Неопределено) Экспорт
	
	Если АдресВременногоХранилища <> Неопределено Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xls");
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		ФайлEXCEL = ИмяВременногоФайла;
	КонецЕсли;
	
	ТаблицаПолная = Новый ТаблицаЗначений;
	
	ТабДок = Новый ТабличныйДокумент;
	Попытка
		ТабДок.Прочитать(ФайлEXCEL, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка чтения данных из файла", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки() + Символы.ВК + Символы.ПС + "Требуется проверить корректность имён файлов вложений: " + Строка(ФайлEXCEL));
	КонецПопытки;
	
	ВыстотаТаблицы = ТабДок.ВысотаТаблицы;
	ШиринаТаблицы = ТабДок.ШиринаТаблицы;
	ТаблицаПолная.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
	ТаблицаПолная.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"), "Сопоставлено", 1);
	
	Для НомерСтроки = 0 По ВыстотаТаблицы Цикл
		НоваяСтрока = ТаблицаПолная.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки + 1;
		НоваяСтрока.Сопоставлено = Ложь;
		Для НомерКолонки = 1 По ШиринаТаблицы Цикл
			ТекстЯчейкиТаблицы = ТабДок.Область(НомерСтроки, НомерКолонки).Текст;
			Если НомерСтроки = 0 И ЗначениеЯвляетсяИменемКолонки(МассивРазрешенныхИменКолонок, ТекстЯчейкиТаблицы) Тогда //тогда создаём колонки
				ТаблицаПолная.Колонки.Добавить(ТекстЯчейкиТаблицы);
			ИначеЕсли НомерСтроки = 0 Тогда
				ТаблицаПолная.Колонки.Добавить("F" + Строка(НомерКолонки));
			Иначе
				ИмяОбласти = ТабДок.Область(НомерСтроки, НомерКолонки).Имя;
				ПозицияРазделителя = Найти(ИмяОбласти, ":");
				Если ПозицияРазделителя = 0 Тогда
					//у нас именно 1 ячейка - не напрягаемся
					НоваяСтрока["F" + Строка(НомерКолонки)] = ТабДок.Область(НомерСтроки, НомерКолонки).Текст;
				Иначе 
					//у нас группа ячеек - слегка сожмём "булки" и распарсим
					ИмяОбласти = ТабДок.Область(НомерСтроки, НомерКолонки).Имя;
					ПозицияОбозначенияЗначимогоИндексаКолонки = Найти(ИмяОбласти, "C");
					ИндексЗначимойСтрокиТабличногоДокумента		= Число(Сред(ИмяОбласти, 2, ПозицияОбозначенияЗначимогоИндексаКолонки - 2));
					ИндексЗначимойКолонкиТабличногоДокумента	= Число(Сред(ИмяОбласти, ПозицияОбозначенияЗначимогоИндексаКолонки + 1, ПозицияРазделителя - ПозицияОбозначенияЗначимогоИндексаКолонки - 1));
					Если ИндексЗначимойКолонкиТабличногоДокумента = НомерКолонки И ИндексЗначимойСтрокиТабличногоДокумента = НомерСтроки Тогда
						//Это "ведущий" элемент с группе ячеек, значит его нужно заполнять значением ячейки
						НоваяСтрока["F" + Строка(НомерКолонки)] = ТабДок.Область(НомерСтроки, НомерКолонки).Текст;
					Иначе 
						//а иначе, нет
						НоваяСтрока["F" + Строка(НомерКолонки)] = "";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПолная;
КонецФункции

Функция ЗначениеЯвляетсяИменемКолонки(МассивРазрешенныхИменКолонок, ТекстЯчейкиТаблицы)
	
	Результат = Ложь;
	Если МассивРазрешенныхИменКолонок = Неопределено Тогда Возврат Результат КонецЕсли;
	Если МассивРазрешенныхИменКолонок.Найти(ТекстЯчейкиТаблицы) <> Неопределено Тогда
		Результат = Истина;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Процедура ПослатьУведомлениеРакете(Отказ = Ложь) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("text");
		ЗаписьJSON.ЗаписатьЗначение("");
		ЗаписьJSON.ЗаписатьИмяСвойства("attachments");
		ЗаписьJSON.ЗаписатьНачалоМассива();
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
				ЗаписьJSON.ЗаписатьИмяСвойства("title");
				ЗаписьJSON.ЗаписатьЗначение("Проблема с tranzit@as61.ru !");
				ЗаписьJSON.ЗаписатьИмяСвойства("title_link");
				ЗаписьJSON.ЗаписатьЗначение("");
				ЗаписьJSON.ЗаписатьИмяСвойства("text");
				ЗаписьJSON.ЗаписатьЗначение("Хьюстон, у нас проблемы с загрузкой e-mail по транзитной схеме!");
				ЗаписьJSON.ЗаписатьИмяСвойства("image_url");
				ЗаписьJSON.ЗаписатьЗначение("https://pbs.twimg.com/profile_images/476373862/exclamacao.gif");
				ЗаписьJSON.ЗаписатьИмяСвойства("color");
				ЗаписьJSON.ЗаписатьЗначение("764FA5");
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		ЗаписьJSON.ЗаписатьКонецМассива();
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ТелоЗапроса = ЗаписьJSON.Закрыть();
	
	HTTPСоединение = Новый HTTPСоединение("***", 3000);
	HTTPЗапрос = Новый HTTPЗапрос("/hooks/93GXyovBrMXBfykku/ZFchvcagMFLdNhrDQLeN7Cr3Mdtanmk5bW3gZ7uokSsmKyoN");
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json");
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Попытка
		Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	Исключение
		//если что-то не так, то пишем ошибку в журнал и отправляем уведомления по почте
		ЗаписьЖурналаРегистрации("Ошибка выполнения", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегламентныеЗадания.АвтоматическаяЗагрузкаОтветовПоставщиковИзПочты,, "ВНИМАНИЕ! Очередь писем от поставщиков не может корректно обработаться!");
	КонецПопытки;
	
	ОтправитьУведомениеКритическаяОшибкаПоПочте();
	
КонецПроцедуры

Процедура ОтправитьУведомениеКритическаяОшибкаПоПочте()
	Почта = Новый ИнтернетПочта;
	Отказ = Ложь;
	ТекстОшибки = "";
	ПодключениеКПочтовомуСерверу(Почта, "akirichkov@as61.ru", Отказ, ТекстОшибки);
	Если Отказ Тогда
		ЗаписьЖурналаРегистрации("Ошибка выполнения", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегламентныеЗадания.АвтоматическаяЗагрузкаОтветовПоставщиковИзПочты,, "Не получается даже по почте уведомить, что очередь tranzit@as61.ru не отрабатывается!");
		Возврат;
	КонецЕсли;
	ОтправитьПисьма(Почта, "akirichkov@as61.ru", Отказ, ТекстОшибки);
	ОтключениеОтПочтовогоСервера(Почта);
	
КонецПроцедуры

Процедура ПодключениеКПочтовомуСерверу(Почта, АдресОтправителя, Отказ, ТекстОшибки)
	
	ПочтовыйПрофиль = Новый ИнтернетПочтовыйПрофиль;
	ПочтовыйПрофиль.АдресСервераSMTP = "mail.as61.ru";
	ПочтовыйПрофиль.ПортSMTP = 25;
	Попытка
		Почта.Подключиться(ПочтовыйПрофиль);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Отказ = Истина;
		Возврат;
	КонецПопытки;
КонецПроцедуры

Процедура ОтправитьПисьма(Почта, АдресОтправителя, Отказ, ТекстОшибки)
	
	ТекстТелоПисьма	= "Хьюстон, у нас проблемы с загрузкой e-mail по транзитной схеме!" + Символы.ВК + Символы.ПС + "Необходимо попробовать найти проблемное письмо пошаговой загрузкой, либо отключить новый метод загрузки";
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Отправитель.Адрес  = АдресОтправителя;

	Письмо.Получатели.Добавить("akirichkov@as61.ru"); //Киричков
	Письмо.Получатели.Добавить("***@as61.ru"); //
	
	Письмо.ОбратныйАдрес.Добавить(АдресОтправителя);
	Письмо.Тема = "Проблема с tranzit@as61.ru !";
	Письмо.Тексты.Добавить(ТекстТелоПисьма, ТипТекстаПочтовогоСообщения.HTML);
	Попытка
		Почта.Послать(Письмо);
	Исключение
		ТекстОшибки = ТекстОшибки + Символы.ВК + Символы.ПС + ОписаниеОшибки();
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры

Процедура ОтключениеОтПочтовогоСервера(Почта)
	Почта.Отключиться();
КонецПроцедуры
